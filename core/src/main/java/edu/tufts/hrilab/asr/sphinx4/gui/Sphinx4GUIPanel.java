/*
 * Copyright Â© Thinking Robots, Inc., Tufts University, and others 2024.
 */
package edu.tufts.hrilab.asr.sphinx4.gui;

import edu.tufts.hrilab.asr.sphinx4.Sphinx4Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;

/**
 * @author Evan Krause evan.krause@tufts.edu
 */
public class Sphinx4GUIPanel extends JFrame {

  private static Logger log = LoggerFactory.getLogger(Sphinx4GUIPanel.class);

  /**
   * Creates new form Sphinx4GUIPanel
   *
   */

  //needed so that radio buttons can be initially set
  private boolean firstTime;
  private Sphinx4Component component;

  public Sphinx4GUIPanel(Sphinx4Component component) {
    this.component = component;
    initComponents();

    Sphinx4Component.ControlState state = component.getControlState();

    switch (state) {
      case ACCEPT:
        acceptState_rdBtn.setSelected(true);
//          acceptOnDeckText_btn.setEnabled(false);
//          rejectOnDeckText_btn.setEnabled(false);
//          clearOnDeckQ_btn.setEnabled(false);
//          onDeckText_txtArea.setText("");
        break;
      case CONFIRM:
        confirmState_rdBtn.setSelected(true);
//          acceptOnDeckText_btn.setEnabled(true);
//          rejectOnDeckText_btn.setEnabled(true);
//          clearOnDeckQ_btn.setEnabled(true);
        break;
      case REJECT:
        rejectState_rdBtn.setSelected(true);
//          acceptOnDeckText_btn.setEnabled(false);
//          rejectOnDeckText_btn.setEnabled(false);
//          clearOnDeckQ_btn.setEnabled(false);
//          onDeckText_txtArea.setText("");
        break;
    }

    this.setSize(this.getPreferredSize());
    this.setVisible(true);
  }

  public void notifyRecognizedQueueAddition() {
    // update dialogue history
    if (confirmState_rdBtn.isSelected()) {
      String text = component.getOnDeckText();
      onDeckText_txtArea.setText(text);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    controlState_btnGrp = new javax.swing.ButtonGroup();
    acceptState_rdBtn = new javax.swing.JRadioButton();
    rejectState_rdBtn = new javax.swing.JRadioButton();
    confirmState_rdBtn = new javax.swing.JRadioButton();
    acceptOnDeckText_btn = new javax.swing.JButton();
    rejectOnDeckText_btn = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    onDeckText_txtArea = new javax.swing.JTextArea();
    clearOnDeckQ_btn = new javax.swing.JButton();

    controlState_btnGrp.add(acceptState_rdBtn);
    acceptState_rdBtn.setText("Accept All");
    acceptState_rdBtn.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        acceptState_rdBtnStateChanged(evt);
      }
    });

    controlState_btnGrp.add(rejectState_rdBtn);
    rejectState_rdBtn.setText("Reject All");
    rejectState_rdBtn.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        rejectState_rdBtnStateChanged(evt);
      }
    });

    controlState_btnGrp.add(confirmState_rdBtn);
    confirmState_rdBtn.setText("Confirm");
    confirmState_rdBtn.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        confirmState_rdBtnStateChanged(evt);
      }
    });

    acceptOnDeckText_btn.setText("Accept");
    acceptOnDeckText_btn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        acceptOnDeckText_btnActionPerformed(evt);
      }
    });

    rejectOnDeckText_btn.setText("Reject");
    rejectOnDeckText_btn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rejectOnDeckText_btnActionPerformed(evt);
      }
    });

    onDeckText_txtArea.setColumns(20);
    onDeckText_txtArea.setRows(5);
    jScrollPane1.setViewportView(onDeckText_txtArea);

    clearOnDeckQ_btn.setText("Clear Queue");
    clearOnDeckQ_btn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearOnDeckQ_btnActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this.getContentPane());
    this.setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                            .addGap(35, 35, 35)
                                            .addComponent(acceptOnDeckText_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(rejectOnDeckText_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(clearOnDeckQ_btn))
                                    .addGroup(layout.createSequentialGroup()
                                            .addGap(35, 35, 35)
                                            .addComponent(acceptState_rdBtn)
                                            .addGap(18, 18, 18)
                                            .addComponent(rejectState_rdBtn)
                                            .addGap(18, 18, 18)
                                            .addComponent(confirmState_rdBtn))
                                    .addGroup(layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap(22, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(acceptState_rdBtn)
                                    .addComponent(rejectState_rdBtn)
                                    .addComponent(confirmState_rdBtn))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(acceptOnDeckText_btn)
                                    .addComponent(rejectOnDeckText_btn)
                                    .addComponent(clearOnDeckQ_btn))
                            .addContainerGap(39, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void rejectState_rdBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rejectState_rdBtnStateChanged
    if (rejectState_rdBtn.isSelected()) {
      try {
        component.setControlState(Sphinx4Component.ControlState.REJECT);
      } catch (Exception e) {
        log.error("Error calling setControlState.", e);
      }

      acceptOnDeckText_btn.setEnabled(false);
      rejectOnDeckText_btn.setEnabled(false);
      clearOnDeckQ_btn.setEnabled(false);
      onDeckText_txtArea.setText("");
    }
  }//GEN-LAST:event_rejectState_rdBtnStateChanged

  private void acceptState_rdBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_acceptState_rdBtnStateChanged
    if (acceptState_rdBtn.isSelected()) {
      try {

        component.setControlState(Sphinx4Component.ControlState.ACCEPT);
      } catch (Exception e) {
        log.error("Error calling setControlState.", e);
      }

      acceptOnDeckText_btn.setEnabled(false);
      rejectOnDeckText_btn.setEnabled(false);
      clearOnDeckQ_btn.setEnabled(false);
      onDeckText_txtArea.setText("");
    }
  }//GEN-LAST:event_acceptState_rdBtnStateChanged

  private void confirmState_rdBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_confirmState_rdBtnStateChanged
    if (confirmState_rdBtn.isSelected()) {
      try {

        component.setControlState(Sphinx4Component.ControlState.CONFIRM);
      } catch (Exception e) {
        log.error("Error calling setControlState.", e);
      }

      acceptOnDeckText_btn.setEnabled(true);
      rejectOnDeckText_btn.setEnabled(true);
      clearOnDeckQ_btn.setEnabled(true);
    }
  }//GEN-LAST:event_confirmState_rdBtnStateChanged

  private void acceptOnDeckText_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptOnDeckText_btnActionPerformed
    try {
      component.acceptUtterance();
      onDeckText_txtArea.setText(component.getOnDeckText());
    } catch (Exception e) {
      log.error("Error calling acceptUtterance.", e);
    }
  }//GEN-LAST:event_acceptOnDeckText_btnActionPerformed

  private void rejectOnDeckText_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectOnDeckText_btnActionPerformed
    try {
      component.rejectUtterance();
      onDeckText_txtArea.setText(component.getOnDeckText());
    } catch (Exception e) {
      log.error("Error calling rejectUtterance.", e);
    }
  }//GEN-LAST:event_rejectOnDeckText_btnActionPerformed

  private void clearOnDeckQ_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOnDeckQ_btnActionPerformed
    try {
      component.clearRecogntionHistory();
      onDeckText_txtArea.setText("");
    } catch (Exception e) {
      log.error("Error calling clearRecogntionHistory.", e);
    }
  }//GEN-LAST:event_clearOnDeckQ_btnActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton acceptOnDeckText_btn;
  private javax.swing.JRadioButton acceptState_rdBtn;
  private javax.swing.JButton clearOnDeckQ_btn;
  private javax.swing.JRadioButton confirmState_rdBtn;
  private javax.swing.ButtonGroup controlState_btnGrp;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea onDeckText_txtArea;
  private javax.swing.JButton rejectOnDeckText_btn;
  private javax.swing.JRadioButton rejectState_rdBtn;
  // End of variables declaration//GEN-END:variables
}
