%%% BRAD: this is based off of the MEASAEPPoC2.dict which was also used for the "lunchbox interruption demos"
%%% it has been combined with the Temi related NL for navigation instructions etc.

START-TEMPLATES

THING;{RN; ?PH:physobj ; VAR}, {DN; ?PH:property}

%intransitive
%VERBI; {C\AGENT ; #x.?PH()}, {C ; ?PH()}
VERBI; {C\AGENT ; #x.?PH($x)}, {C ; ?PH(?ADDRESSEE)}

%transitive verb
%VERBT; {(C/REF)\AGENT ; #x#y.?PH($x,$y)}, {C/REF ; #x.?PH($x)}
VERBT; {(C/REF)\AGENT ; #x#y.?PH($x,$y)}, {C/REF ; #x.?PH(?ADDRESSEE, $x)}

%ditransitive verb with agent arguments
%VERBDTA; {((C/AGENT)/AGENT)\AGENT ; #x#y#z.?PH($x,$y,$z)}, {(C/AGENT)/AGENT ; #x#y.?PH($x,$y)}
VERBDTA; {((C/AGENT)/AGENT)\AGENT ; #x#y#z.?PH($x,$y,$z)}, {(C/AGENT)/AGENT ; #x#y.?PH(?ADDRESSEE, $x,$y)}

%transitive verb with direction argument
VERBTDDEG; {((C/DEG)/DIR)\AGENT ; #x#y#z.?PH($x,$y,$z)}, {(C/DEG)/DIR ; #x#y.?PH(?ADDRESSEE, $x,$y)}

%transitive verb with direction argument
VERBTD; {(C/DIR)\AGENT ; #x#y.?PH($x,$y)}, {C/DIR ; #x.?PH(?ADDRESSEE, $x)}

%ditransitive verb
VERBDT; {((C/REF)/AGENT)\AGENT ; #x#y#z.?PH($x,$y,$z)}, {((S/PP)/REF)\AGENT ; #x#y#z.?PH($x,$y,$z)}, {(C/REF)/AGENT ; #x#y.?PH($x,$y)}

ADDRESSABLE; {AGENT ; ?PH} ,{G/G, S/S, C/C, Q/Q, G\G, S\S, C\C, Q\Q; #x.directAddress(?PH,$x)}

%EFFECTTEMPLATE; {(EFFECT/REF)\AGENT; #x#y.?PH($x,$y)}, {EFFECT/REF; #x.?PH($x)}, {EFFECT; ?PH}
CONDTEMPLATE; {COND/RN; #x.?PH($x)}, {COND; ?PH}

LOCATION;{LOC; ?PH ; VAR}, {DN; ?PH}
SAVELOCATION; {C/LIT* ; #x.saveLocation(?ADDRESSEE, $x)}
GOTO; {C/REF ; #x.goToLocation(?ADDRESSEE,$x)} ,{(C/REF)\AGENT ; #agent#x.goToLocation($agent,$x)}

END-TEMPLATES
%%%%%%%%%%%  A  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%a; REF/RN ; #x.$x ; INDEFINITE
a; REF/RN ; #x.$x ; DEFINITE
a; DESC/DN ; #x.$x
a; DESC/DESC ; #x.$x
a; RECIPE/RECIPE; #x.$x
%a; DESC/DN* ; #x.$x

%TODO;brad; what was this for
%above; TDIR; above
above; ABOVE ;above

actor; AGENT ; ?ADDRESSEE

add; (VAL/COND)/CONDITIONTYPE , (C/EFFECT)/EFFECTTYPE ; #t#x.mod(insert($x),$t)
add; (VAL/PP)/C; #x#y.mod(insert($x),$y)
add; VAL/C; #x.mod(insert($x),none())

after; PP/C; #x.after($x)

%after; ((C/S)/EFFECTTYPE)/C; #a#t#e.modifyAction($a,insert($e),$t)

ahead; Adj; ahead

an; REF/RN ; #x.$x ; DEFINITE
%an; REF/RN ; #x.$x ; INDEFINITE
an; DESC/DN ; #x.$x
an; DESC/DESC ; #x.$x
%an; DESC/DN* ; #x.$x

%TODO:brad:temporary workaround for "dance with shafer and andy"
%and; AGENT/AGENT ; #x.$x

andy; ADDRESSABLE ; andy:agent

%you are holding the object
%are; ((EFFECT/REF)/V)\AGENT ; #a#v#r.$v($a,$r)
%are; ((COND/REF)/V)\AGENT ; #a#v#r.$v($a,$r)

as ; AS ; as

%area; THING
%the area ; REF; area

arm; N ; arm
arms; N ; arms

at; (STATE/LOC)\REF; #r#l.at($r,$l)

%%%%%%%%%%%  B  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

backward; DIR; back

%the area behind you, the cup behind the ball
%behind; (REF / AGENT) \ REF, (REF / REF) \ REF,; #x#y.behind($x,$y); MOD
behind; (REF / AGENT) \ REF, (REF / REF) \ REF,; #x#y.behind($x,$y)

%before; (C\C)/C; #x#y.before($y,$x)
before; PP/C; #x.before($x)

bottle; THING

box; THING
cup; THING
bowl; THING

%scale; THING
box_full; THING
bottle; THING


brad; AGENT ; brad
marlow; AGENT; marlow
self; AGENT; self

bring; VERBDT

but; ADV\ADV; #x.$x

bye; G, G[good] ; bye

%%%%%%%%%%%  C  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%what is the probability that you can X
the probability that ; (QUERYABLE/ MODAL)/AGENT; #a#m.probabilityOf($a,$m)

what is; Q / QUERYABLE; #x.$x
what is; (Q / FOR) / (QUERYABLE/FOR); #x.$x

can; MODAL / C ; #x.$x
could; MODAL / C ; #x.$x

can; (Q / C) / AGENT ; #x #y.capableOf($x,$y)

%catch; (C/REF)\AGENT ; #x#y.catch($x,$y)
catch; C/AGENT ; #x.catch($x)

could; (Q / C) / AGENT ; #x #y.capableOf($x,$y)

commX; AGENT ; commX

condition ; CONDITIONTYPE\CONDITIONTYPEPREFIX ; #x.condition($x)
precondition ; CONDITIONTYPE ; condition(pre)

crouch down; VERBI ; crouchDown

crouch; VERBI ; crouch

cut; VERBT

cuttingboard; THING; cuttingBoard
%%%%%%%%%%%  D  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

describe how; C/INF; #i.describe(?ADDRESSEE,how($i))

%"do you trust me"
do; Q/ C; #x.$x
%do; (Q \ WHO)/(Q \ WHO); #x.$x
%do; (Q/WHO)/(C / AGENT) ; #x.$x

%"do a squat"
do a; C/N ; #x.doa$x()
do a; (C\AGENT)/N ; #y#z.doa$y()

%don't; ((C/PP)/C)\ADV; #w#x#y.modifyAction($w,remove($x),$y)

% " does dempster trust me"
does; Q/C ; #x.$x

down; DIR; down
down; DOWN ;Down

%degrees; VAL\NUM ; #x.$x

dempster; ADDRESSABLE ; dempster:agent

%%%%%%%%%%%  E  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

effect ; EFFECTTYPE\EFFECTTYPEPREFIX ; #x.effect($x)
effects ; EFFECTTYPE\EFFECTTYPEPREFIX ; #x.effect($x)
affect ; EFFECTTYPE\EFFECTTYPEPREFIX ; #x.effect($x)
affects ; EFFECTTYPE\EFFECTTYPEPREFIX ; #x.effect($x)


evening; G[good] ; evening

evan; AGENT ; evan

execute while learning; C ; changeLearningExecution(?ADDRESSEE,execute)

%%%%%%%%%%%  F  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

failure; EFFECTTYPEPREFIX; failure

find; VERBT ; findObject
first; C/C ; #x. $x

%for; FOR/AGENT; #x. $x
for; FOR; For

forward; DIR; forward

%forget how; C/INF; #x.forgetHow($x)
forget how to; C/C; #x.forgetHow($x)
forget that; C/S; #x.forgetThat($x)

from ; PPadv/C ; #x.from($x)
from; LOC/LOC; #x.$x
from; FROM; from
from; REF/REF; #x.$x


%%%%%%%%%%%  G  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

go; VERBTD ;move

goal; QUERYABLE; goal

good; G / G[good]; # x. good_$x

grab; VERBT ;grab
%grasp; VERBT ;primitiveGrasp

gray; Adj; gray

%%%%%%%%%%%  H  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

hand; VERBDT

hand; N ; hand
hands; N ; hands

hi; G ; hi
hi there; G ; hi_there

hello; G ; hello
%hello; G / N, G \ N ; # x. directAddress($x,hello)

%holding; EFFECT/REF; #x.holding($x)
are holding; (COND/REF)\AGENT; #a#x.holding($a,$x)
how; HOW; how

how would; (Q/C)/AGENT ; #a#c.how($a,$c)
how do; (Q/C)/AGENT ; #a#c.how($a,$c)

%%%%%%%%%%%  I  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
i; AGENT ; ?INTERACTOR

is; (S/DESC)\REF; #x#y.instanceOf($x,$y)
%is; (S / DESC) \ REF; # x #y. definitionOf($x,$y)

is; (((S / NP)  / OF) / COMPOSED)\ REF; #x#c#o#y.composed$o($x,$y)
is; (S / PROP) \ REF; # x #z. propertyOf($x,$z)
is; (S /DESC)\REF[ACT]  ; #x #y.instanceOf($x,$y)
%%%%%%%%%%% not changing not(is()) stuff to prop
is; (S / DESC[not]) \ REF ; # x #y. notDefinitionOf($x,$y)
is; (S / PROP[not]) \ REF; # x #z. notPropertyOf($x,$z)
is; (S/VP[how])\N ; #x#y.is($x,$y)
is; IS; is

is like; (C/C)\C ; #x#y.modifyAssemble(?ADDRESSEE,$x,$y)

in ; PPadv/C; #x.$x

%pour goal
%in; (PP/REF)\VAL ; #n#r.full($r,$n)
%TODO:obviously this isn't very general
in; (PP/REF)\N ; #n#r.in($r,$n)
%on; ((PP/REF)\NUM)\UNIT ; #u#n#r.contains($r,$u,$n)
%I want washers in the box
%in; (PP/REF)\UNIT ; #u#r.contains($r,$u,$u)
%on; (PP/REF)\UNIT ; #u#r.contains($r,$u,$u)
washers; N; washers
marbles; N; marbles
beads; N; beads
beans; N; beads
nuts; N; nuts

in; LOC/LOC; #x.$x

is; ((EFFECT/REF)/V)\AGENT ; #a#v#r.$v($a,$r)

is trusted; S\AGENT ; #a.trusted($a)
is a novice; S\AGENT; #a.novice($a)
is in; (S/PLACE)\AGENT; #a#p.isIn($a,$p)

it; REF ; it ; INFOCUS

%%%%%%%%%%%  J  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

jar; THING

%%%%%%%%%%%  K  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

knife; THING

know how; (C/INF)\AGENT ; #a#i.knowHow($a,$i)
know; (C/KNOWABLE)\AGENT ; #a#k.know($a,$k)

%%%%%%%%%%%  L  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

left; DIR; left
%left ninety degrees; DEG; left,ninety
ninety degrees; DEG; ninety
left; N/N ; #x.left$x

look; VERBTD ; look

lower; C / NP[your]; # x. lower($x)
lower; (C\AGENT)/ NP[your]; #x#y. lower($x)

%%%%%%%%%%%  M  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%makesure; (C/(C\C))/INF; #x#y.modifyAction(insert($x),$y@$x)
make sure; ((C/PP)/C)\ADV; #w#x#y.modifyAction(?ADDRESSEE,$w,insert($x),$y)
make sure; ((C/PP)/S)\ADV; #w#x#y.modifyAction(?ADDRESSEE,$w,insert($x),$y)

me; AGENT ; ?INTERACTOR

medkit; THING

morning; G[good] ; morning

%move forward
%move; ((C/DIR)/REF)\AGENT; #a#x#y.moveObjectInDirection($x,$y)
%move; (C/DIR)/REF; #x#y.moveObjectInDirection($x,$y)

%move the object foward one meter
move; (((C/VAL)/DIR)/REF)\AGENT; #a#x#y#z.moveObjectInDirection($x,$y,$z)
move; ((C/VAL)/DIR)/REF; #x#y#z.moveObjectInDirection($x,$y,$z)

%move the object foward one meter with arm one
%move; ((((C/ARM)/VAL)/DIR)/REF)\AGENT; #g#x#y#z#a.moveObjectInDirection($x,$y,$z,$a)
%move; (((C/ARM)/VAL)/DIR)/REF; #x#y#z#a.moveObjectInDirection($x,$y,$z,$a)

%move the object toward me
move; (((C/AGENT)/TDIR)/REF)\AGENT; #a#x#y#z.moveObjectRelativeTo($x,$y,$z)
move; ((C/AGENT)/TDIR)/REF; #x#y#z.moveObjectRelativeTo($x,$y,$z)

%move the object toward the cup
move; (((C/REF)/TDIR)/REF)\AGENT; #a#x#y#z.moveObjectRelativeTo($x,$y,$z)
move; ((C/REF)/TDIR)/REF; #x#y#z.moveObjectRelativeTo($x,$y,$z)

%move forward
move; VERBTD

%move above
move; ((C/REF)/ABOVE)/REF ; #x#a#y.moveobjectabove($x,$y)


mug; THING

%%%%%%%%%%%  N  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

near; PP/REF; #x.near($x)

need; ((S/ INF)/AGENT)\ AGENT ; #x#y#z.want($x,$y,$z)
need; (S/ INF)\ AGENT, (S/REF)\ AGENT ; #x#y. want($x,$y)
needs; (S/ INF)\ AGENT, (S/REF)\ AGENT, ; #x#y. want($x,$y)

%need; (C/STATE)\AGENT; #a#s.sti($a,$s)

night; G[good] ; night

not; PROP[not] / Adj; # x. $x

%now; C/C, C\C, Q\Q, Q/Q ; #x. $x

%%%%%%%%%%%  O  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

object; THING
objects; THING
carrot; THING; carrot

%obstacle; THING
the obstacle; REF ; obstacle
an obstacle; REF ; obstacle

of ; (REF/REF)\REF ; #x#y.of($x,$y) ; MOD

%ok; ACK ; okay
%
%okay ; ACK ; okay

ok; C/C, S/S ; # x. $x

orange; Adj; orange

overall; CONDITIONTYPEPREFIX; overall

%%%%%%%%%%%  P  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%part; THING

pass ; VERBDT

%pause; VERBI ; pause

pickup ; VERBT; pickup
pick up ; VERBT; pickup
pick and place ; VERBT; pickAndPlace
%pick; VERBT/UP; pickUp

plate; THING

please; C / C, C \ C, Pron \ Pron, S \ S ; #x. $x

point to; VERBT ; pointTo

post; CONDITIONTYPEPREFIX; post

pre; CONDITIONTYPEPREFIX; pre

putdown; VERBT ; putDown

%pr2; AGENT ; pr2
%%%%%%%%%%%  Q  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

red; RN/RN; #x.red($x) ; MOD
white; RN/RN; #x.white($x) ; MOD
blue; RN/RN; #x.blue($x) ; MOD
green; RN/RN; #x.green($x) ; MOD
orange; RN/RN; #x.orange($x) ; MOD
yellow; RN/RN; #x.yellow($x) ; MOD
purple; RN/RN; #x.purple($x) ; MOD
black; RN/RN; #x.black($x) ; MOD


%%%%%%%%%%%  R  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

raise; C / NP[your]; #x. raise($x)
raise; (C\AGENT)/ NP[your]; #x#y. raise($x)

ravenna; AGENT ; ravenna
chris; AGENT ; chris

release; VERBT; release
put down; VERBT; putDown

relax ; VERBI; rest

%remove; ((C/WITH)/COND)/CONDITIONTYPE , ((C/WITH)/EFFECT)/EFFECTTYPE ; #t#X#a.modifyAction($a,remove($x),$t)
remove;(VAL/COND)/CONDITIONTYPE , (VAL/EFFECT)/EFFECTTYPE ; #t#x.mod(remove($x),$t)
remove ; VAL/C; #x.mod(remove($x),none())
remove ; (VAL/PP)/C; #x#l.mod(remove($x),$l)


replace; (VAL/WITH)/C; #x#y.mod(replace($y,$x),none());

%replace; (C/WITH)\ADV; #a#w.modifyAction($a,replace($w),none())
%replace; ((C/PP)/WITH)\ADV; #a#w#l.modifyAction($a,replace($w),$l)
%replace; ((C/WITH)\PP)\ADV; #a#l#w.modifyAction($a,replace($w),$l)
%replace; ((C/WITH)/COND)/CONDITIONTYPE , ((C/WITH)/EFFECT)/EFFECTTYPE ; #t#x#a.modifyAction($a,replace($x),$t)

resume; VERBI ; resume

right; DIR; right
%right ninety degrees; DEG; right,ninety
right; N/N ; #x.right$x

%robot; ADDRESSABLE; self:agent
robot one; ADDRESSABLE; robotone:agent
robot two; ADDRESSABLE; robottwo:agent
robot to; ADDRESSABLE; robottwo:agent
arm one; ADDRESSABLE; armone:agent
arm two; ADDRESSABLE; armtwo:agent
arm to; ADDRESSABLE; armtwo:agent
learn to; ADDRESSABLE; armtwo:agent
i'm to; ADDRESSABLE; armtwo:agent

room one; PLACE; roomOne

%%%%%%%%%%%  S  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

safe; PROP; safe

% "does dempster see an obstacle"
%see; VERBT; see
see; (C/REF)\AGENT ; #x#y.see($x,$y)

sepi; ADDRESSABLE ; Sepi

shafer; ADDRESSABLE ; shafer:agent
schafer; ADDRESSABLE ; shafer:agent
%TODO;brad was this just a typo?
shaffer; ADDRESSABLE ; shafer:agent

%shake your head
shake your; C/N; #x.shakeyour$x()
shake your; (C\AGENT)/N; #y#z.shakeyour$y()
%shake; C / NP[your]; #x. shake($x)
%shake; (C\AGENT)/ NP[your]; #x#y. shake($x)


sit; VERBI ; sit

solid; Adj; solid

stand; VERBI ; stand
stand up; VERBI ; standUp

%TODO:brad: something about the parenthesis makes it so this can be a VERBI
%start over; C ; goToStartPose(false)
%start over; C\AGENT ; #x.goToStartPose(false)
%start over; VERBI ; startOver()
%start over; C\AGENT ; #x.startOver()


straight; DIR ; straight

%stop; VERBI ; stop

sure; SURE; sure

success; EFFECTTYPEPREFIX; success

successfully; EFFECTTYPE; effect(success)

%%%%%%%%%%%  T  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% I will teach you how to pass me the knife
teach you how to assemble; (S\AGENT)/REF; #m#a.teach($a,?ADDRESSEE,to(assemble($m)))
teach you how to assemble a; (S\AGENT)/REF; #m#a.teach($a,?ADDRESSEE,to(assemble($m)))
teach you how to assemble an; (S\AGENT)/REF; #m#a.teach($a,?ADDRESSEE,to(assemble($m)))


teach;(((S\AGENT)/INF)/HOW)/AGENT; #l#h#a#t.teach($t,$l,$a)

teach you how to; (S\AGENT)/C; #a#t.teach($t,?ADDRESSEE,to($a))

%tell; ((C/INF)/AGENT)\AGENT ; #x#y#z.directAddress($x,tell($y,$z))
tell; (C/INF)/AGENT ; #x#y.tell($x,$y)

thank you; G ; thank_you
thanks ; G ; thank_you

that; REF ; ACTIVATED
that; REF/RN ; #x.$x ; FAMILIAR
%that is how you
that is how you assemble; S/REF; #m.endTeaching(?ADDRESSEE,assemble($m))
that is how; (S/C)/AGENT ; #a#c.endTeaching($a,$c)

there are; S/PP; #x.$x
their; S/PP; #x.$x

the; REF/RN ; #x.$x ; DEFINITE

then; C/C; #x.$x

this; REF ; ACTIVATED
this; REF/RN ; #x.$x ; REFACTIVATED

to; TO; to
%%TODO:brad: what is the to for, do we need it?
to; PPadv/C; #x.$x
to action; PPadv/C; #x.$x
to; INF/C; #x.to($x)

%%TODO:brad: there is a duplicate definition in Foodordering.dict
tomato; THING

toward; TDIR; toward

%%tust me
trust; (C/AGENT)\AGENT ; #x#y.trust($x,$y)
trust; C/AGENT ; #x.trust($x)}
trust; (Q \ WHO)\AGENT; #x#y.trust($x,$y)

%turn; VERBTDDEG; turn
turn; VERBTD ; turn

%%%%%%%%%%%  U  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

up; UP; Up
up; DIR; up

used; (PROP/AFFORDANCE)/FOR ; #x #y.usedFor($y)

%%%%%%%%%%%  V  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%  W  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

walk; VERBTD ; move

want; (S/ INF)\ AGENT, (S/REF)\ AGENT, ; #x#y. want($x,$y)
want; ((S/ INF)/AGENT)\ AGENT ; #x#y#z.want($x,$y,$z)

want; (S/PP)\AGENT; #a#p.want($a,$p)

%what are your goals, what are shafer's goals
what are; (Q/QUERYABLE)/AGENT; #a#q.whatAre($a,$q)

what time is it; Q; timeIs(WHAT)
what time it is; KNOWABLE; currentTime

%when cutting a tomato ...
when; ADV/C ; #x.$x

who do; WHO; WHO

will; (S\AGENT)/(S\AGENT), (S\AGENT)/(C\AGENT); #x.will($x)
%still not sure how to do the general rule for this
%will; ((S/REF)/(C/REF))\AGENT, ((S/AGENT)/(C/AGENT))\AGENT, ((((S/INF)/HOW)/AGENT)/(((S/INF)/HOW)/AGENT))\AGENT, (S/S)\AGENT ; #x#y.will($x,$y)
%I'll; ((S/REF)/(C/REF)), ((S/AGENT)/(C/AGENT)), (((S/INF)/HOW)/AGENT)/(((S/INF)/HOW)/AGENT), S/S ; #y.will(?ADDRESSEE,$y)

%with; PP/C; #x.with($x)
%with; (WITH/C)\C; #x#y.with($y,$x)
with; WITH/C; #x.$x


%without ; (C/C)\ADV; #w#x.modifyAction($w,remove($x),none())
%without ; ((C/PP)/C)\ADV; #w#x#l.modifyAction($w,remove($x),$l)

%%%%%%%%%%%  X  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%  Y  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

you; AGENT; ?ADDRESSEE

your; AGENT; ?ADDRESSEE

your; NP[your] / N ; # x. $x

%%%%%%%%%%%  Z  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%% hacks

%save this pose as
%TODO:brad: make this into a template?
save this pose as; C/LIT*; #x.recordCameraPoseAsk(?ADDRESSEE,$x)
this pose is; C/LIT*; #x.recordCameraPoseAsk(?ADDRESSEE,$x)
%save this pose as; C/POSE; #x.recordCameraPoseAsk($x)
%this pose is; C/POSE; #x.recordCameraPoseAsk($x)
go to pose; C/REF; #x.goToCameraPose(?ADDRESSEE,$x)
go to pose; (C/REF)\AGENT; #y#x.goToCameraPose(?ADDRESSEE,$x)
go to start pose; C ; startOver()

move forward; C ; moveForward()

%table; POSE; table
%
%mouth; POSE; mouth
%start; POSE; start
%temi; POSE; temi
%robot; POSE; robot
%table; POSE; table
%looking down; POSE ; lookingdown
%looking up; POSE; lookingup
%
%unscrew; POSE; unscrew
human; POSE; human


feed; VERBDT

food; THING

%Temi stuff

follow me; VERBI  ; followMeBlocking
%stop following me; VERBI; stopFollowing

this location is; SAVELOCATION
this location is the; SAVELOCATION
this location is location; SAVELOCATION

save this location as; SAVELOCATION
save this location as the; SAVELOCATION
save this location as location; SAVELOCATION
delete location; C/LOC* ; #x.deleteLocation($x)

go to; GOTO
go to location; GOTO
come; GOTO

greet patients in; C/LOC* ; #x.greet($x)
greet patient in; C/LOC* ; #x.greet($x)
greet patience in; C/LOC* ; #x.greet($x)
%greet patients in location; C/LOC* ; #x.greet($x)

%patients wait in location; C/LOC* ; #x.setGreetDest($x)
%patience wait in location; C/LOC* ; #x.setGreetDest($x)
the greeting destination is; C/LOC* ; #x.setGreetDest($x)

escort patient; (C/LOC)/LOC ; #x#y.escortPatient($x,$y)
escort the patient; (C/LOC)/LOC ; #x#y.escortPatient($x,$y)
escort; ((C/LOC)/LOC)/N* ; #p#x#y.escortPatient($x,$y)
from; LOC/LOC*; #x.$x
%to; LOC/LOC*; #x.$x
fetch; C/I* ; #x.fetch($x)
fetch; (C/LOC*)/I* ; #x#y.fetch($x,$y)
fetch me; C/I* ; #x.fetch($x)
fetch me; (C/LOC*)/I* ; #x#y.fetch($x,$y)

get me; C/I*; #x.fetch($x)
get me; (C/LOC*)/I* ; #x#y.fetch($x,$y)
bring me; C/I*; #x.fetch($x)
bring me; (C/LOC*)/I* ; #x#y.fetch($x,$y)


temi; ADDRESSABLE ; self

i gave you; S/I; #x.holding(?ADDRESSEE,$x)

put away; VERBT; putAway

bring; (C/LOC)/I; #i#l.bring($i,$l)
to; LOC/LOC; #x.$x
supplies are stored in; C/LOC ; #x.setStorageArea($x)

home base; LOC; homebase

%location ; LOC/LOC*, LOC/LOC; #x.$x
the ; LOC/LOC*, LOC/LOC; #x.$x
the ; I/I*, I/I; #x.$x


storage room; LOC; storage
reception; LOC; reception

exam room; LOC/NUM; #x.examRoom$x
%one; NUM; .1
%two; NUM; .2
%three; NUM; Three
%four; NUM; Four
%five; NUM; Five

get me; C/I; #x.get($x)
jacket; I; jacket
floss; I; floss
tooth paste; I; toothPaste
fluoride; I ;fluoride
mouthwash; I ;mouthwash
%say; C/* ; #x.sayText($x)

a;I/I;#x.$x

%m; VAL\NUM ; #x.$x
%meter; VAL\NUM ; #x.$x
%meters; VAL\NUM ; #x.$x


mm; VAL\NUM ; #x.val($x,mm)
millinewton meter; VAL\NUM ; #x.val($x,mNm)

degrees; VAL\NUM ; #x.val($x,deg)
6500°; VAL ; val(6500,deg)

x; NUM/NUM ; #x.$x
y; NUM/NUM ; #x.$x
z; NUM/NUM ; #x.$x

save location at relative coordinates; (((C/LOC)/AS)/NUM)/NUM ; #x#y#a#l.saveLocation(?ADDRESSEE,$l,$x,$y)

with arm one; ARM ; one
with arm two; ARM ; two

deliver; ((C/LOC)/LOC)/REF ; #o#s#d.deliver($o,$s,$d)
walkrite; C/VAL; #x.move(right,$x)

move; ((((C/NUM)/NUM)/NUM)/POINT)/REF ; #r#p#x#y#z.carryTo($r,$x,$y,$z)
to coordinates; POINT; point
point; NUM/NUM; #x.$x

%TODO:brad this is a bit hacky with the listener field and ack()
say; C/LIT* ; #x.generateResponseFromString(?ADDRESSEE,$x)
say message; C/LIT* ; #x.generateResponseFromString(?ADDRESSEE,$x)
%say; C/LIT* ; #x.generateResponse(?INTERACTOR,ack($x),direct)
%say message; C/LIT* ; #x.generateResponse(?INTERACTOR,ack($x),direct)

%I want the object in the box
%want; (C/RELATION)\AGENT; #x#y.want($x,$y)
%in the box; RELATION\REF; #x.at($x,box)

describe your plan; C; describe(how(to(planned())))

open; PROP ;open
%now; PROP/PROP ;#x.$x

%pour from jar into box until it is full
pour from; ((C/METHOD)/REF)/REF ; #from#to#method.pour(?ADDRESSEE,$from,$to,$method)

%pour nuts from the jar into the box
pour; ((C/REF)/REF)/N ; #contents#from#to.pour(?ADDRESSEE,$contents,$from,$to)
pour; (((C/REF)/REF)/N)\AGENT ; #agent#contents#from#to.pour($agent,$contents,$from,$to)

into; REF/REF; #x.$x
until i tell you to stop; METHOD ; external

%until; (METHOD/FULL)/REF; #r#f.$f
%
%is full ; FULL; vision

until the box is full ; METHOD; vision

%stop pouring; C; stopPouring()
stop pouring; C; acknowledge(?ADDRESSEE)

stop following me; C; acknowledge(?ADDRESSEE)

acknowledge; C; acknowledge(?ADDRESSEE)
okay; C; acknowledge(?ADDRESSEE)
ok; C; acknowledge(?ADDRESSEE)

wait for acknowledgement ; C ; waitForAck(?ADDRESSEE)

%tod: brad: i this worth generalizing?
container b ; REF ; containerB ; VAR
container c ; REF ; containerC ; VAR

fill; ((C/REF)/FROM)/REF; #x#from#y.fill($x,$y)

open; C/REF; #x.open($x)
is open; S\REF; #x.isopen($x)
is open; EFFECT\REF; #x.isopen($x)
is now open; S\REF; #x.isopen($x)
is now open; EFFECT\REF; #x.isopen($x)

%TDOD:brad: generalize this to nuts/washers/etc
grams of nuts ; UNIT; weight

advance the conveyor belt; C ; moveConveyorForward(?ADDRESSEE)

% lunch box a contains an apple and a banana and an orange

%lunch box number; RECIPE/RECIPE* ; #x.lunchbox_$x
%lunchbox number; RECIPE/RECIPE* ; #x.lunchbox_$x
%recipe ; RECIPE/RECIPE* ; #x.recipe_$x

lunch box number one; RECIPE ; lunchbox_one
lunch box number two; RECIPE ; lunchbox_two

%TDOD:brad: should this be definition of? contains?
%contains ; (C/DESC)\RECIPE, (C/CONJ)\RECIPE ; #r#d.recipe($r,$d)
%contains ; (C/CONJ)\RECIPE ; #r#d.recipe($r,$d)
contains ; (((S/DESC)/DESC)/DESC)\RECIPE ; #r#x#y#z.recipe($r,contains($x,$y,$z))
and contains ; ((((S/DESC)/DESC)/DESC)\RECIPE)\DESC ; #c#r#x#y#z.recipe($r,$c,contains($x,$y,$z))
uses; DESC/DESC; #x.$x

%and; (CONJ/DESC)\DESC, (CONJ/DESC)\CONJ; #b#a.and($b,$a)
% and; DESC/DESC; #x.$x

%deliver lunch box a
deliver a; C/RECIPE ; #r.deliver($r,none)

deliver a; (C/RECIPEMOD)/RECIPE ; #r#m.deliver($r,$m)

i need; (C/LOC)/RECIPE ; #r#l.deliver(?ADDRESSEE,$r,$l)
i need; ((C/LOC)/RECIPEMOD)/RECIPE ; #r#m#l.deliver(?ADDRESSEE,$r,$m,$l)
%i need; (C/LOC)/RECIPE ; #r#l.deliver(?ADDRESSEE,$r,$l)
at; LOC/LOC; #x.$x

with; RECIPEMOD/RECIPEMOD; #x.$x

instead of; (RECIPEMOD/DESC)\DESC; #b#a.replace($b,$a)

only; RECIPEMOD/DESC; #d.only($d)

%apple; DN; apple
%banana; DN; banana
%orange; DN; orange

lunchbox; THING; lunchbox

bowl; THING; bowl

%poor
%presentation -> precondition
%ad cond/ effect ... to action ...

%build a box from the jar
%tell the pox from the jar

fries ; DESC; fries
peas ; DESC; peas
peanut butter; DESC; pb
apple ; DESC; apple
pepper; DESC; pepper
milk ; DESC; milk
soda ; DESC; soda
orange juice; DESC; oj

look for food; VERBI; startFoodGraspSearches
look for containers; VERBI; startPourSearch

%temp hack
move ee forward; C; moveForward()
move ee backward; C; moveBackward()
move ee left; C; moveLeft()
move ee right; C; moveRight()
move ee up; C; moveUp()
move ee down; C; moveDown()

ソーダの代わりにオレンジジュースの番のランチボックスをお願いします; C; deliver(lunchbox_two,replace(oj,soda))
ソーダの代わりにオレンジジュースの2箱お願いします; C; deliver(lunchbox_two,replace(oj,soda))

%goal pausing etc:
stop; C ; cancelGoal()
stop; C/C, C/S; #g.stopAndDo(#g)
stop; (C/INSTEAD)/C, (C/INSTEAD)/S; #g#m.supersedeAndUndo(?ADDRESSEE, $g)
instead; INSTEAD; instead

%cancel current task; VERBI; cancelTemiGoal
%remove current task; VERBI; cancelTemiGoal
%end current task; VERBI; cancelTemiGoal

pause; C ; suspendGoal(?ADDRESSEE)
wait; C ; cancelGoal(?ADDRESSEE)
wait; (C/FIRST)/C, (C/FIRST)/S; #g#m.supersedeCurrentGoal(?ADDRESSEE, $g)
first; FIRST; first

resume; C ; resumeGoal()

look for stuff; C; startObjectSearches()
cheatcode; C; putDown()

get; C/C; #x.$x
put; C/C; #x.$x
get; C/STATE; #x.sti(?ADDRESSEE, $x)
get; (C/STATE)\AGENT; #agent#x.sti($agent,$x)
above; STATE/REF; #x.above($x)

tilt; VERBT; tilt
pick up; VERBT; pickup

%for recipe definition
standard medkit; RECIPE; standardMedkit

additional; RECIPE/DESC; #x.additional($x)
bandages; DESC; bandages
antiseptic; DESC; antiseptic
painkillers; DESC; painkillers

%for rr/grasping?
bandages; THING; bandages
antiseptic; THING; antiseptic
painkillers; THING; painkillers
medical caddy; THING; medkit
prop; THING; prop
bottle; THING; bottle

%pose binding
is above; (C/LOC)\REF; #x#y.bindPose(?ADDRESSEE,$x,$y)
conveyor end; LOC; conveyor_end

%sending message, just display it in the web app?
send message; C/LIT* ; #x.sendMessage(?ADDRESSEE,$x)

go in; (S/COMPARTMENT)\DESC; #d#c.stores($c,$d)
goes in; (S/COMPARTMENT)\DESC; #d#c.stores($c,$d)

compartment 1; COMPARTMENT; compartmentOne
compartment 2; COMPARTMENT; compartmentTwo
compartment 3; COMPARTMENT; compartmentThree
compartment 4; COMPARTMENT; compartmentFour
compartment 5; COMPARTMENT; compartmentFive

%%%% poc4 + screwing specific %%%%%%%

%TODO:brad: the semantic type here is a super messy shortcut to have this be a question answer
pose; VAL/REF; #p.pose($p);
job; VAL/JOB; #j.job($j)
location; VAL/REF; #l.location($l);

%TODO:brad: ideally these would be asserted by the consultant?
hole; JOB; holeDet
cbDet; JOB; cbDet
n v det; JOB; nvDet

circuit breaker face; JOB; cbDet
n v face; JOB; nvDet
testnv; JOB; testnv

%m3 hole; JOB; holeDet
%deep m3 hole; JOB; holeDet

define new screw type; C/SCREWTYPE; #x.defineScrewType(?ADDRESSEE,$x)

screw; (C/REF)/SCREWTYPE; #s#h.screwIn(?ADDRESSEE,$s,$h)
screw-in; (C/REF)/SCREWTYPE; #s#h.screwIn(?ADDRESSEE,$s,$h)
screw; ((C\AGENT)/REF)/SCREWTYPE; #s#h#a.screwIn($a,$s,$h)

mount; C/SCREWTYPE; #s.mountScrew(?ADDRESSEE,$s)

align with; C/REF; #s.alignWith(?ADDRESSEE,$s)

run screwdriver job; C/SCREWTYPE; #s.runScrewdriverJob(?ADDRESSEE,$s)
run the screwdriver job of; C/SCREWTYPE; #s.runScrewdriverJob(?ADDRESSEE,$s)
%TODO:brad: we probably don't want this in the long run, but it make things easier until we get semantic typing working in here
an; SCREWTYPE/SCREWTYPE ; #x.$x
a; SCREWTYPE/SCREWTYPE ; #x.$x
the; SCREWTYPE/SCREWTYPE ; #x.$x
in; SCREWTYPE/SCREWTYPE ; #x.$x
and; SCREWTYPE/SCREWTYPE ; #x.$x

the; DESC/DESC ; #x.$x
assemble; C/REF; #x.assemble(?ADDRESSEE,$x)

hole; RN; hole; VAR

m3 hole; RN; m3Hole; VAR
m3 holes; REF; m3Hole; DEFINITE
m3 hole; DESC; m3Hole
m3 holes; DESC; m3Hole

deep m3 hole; RN; deepM3Hole; VAR
deep m3 holes; REF; deepM3Hole; DEFINITE
deep m3 hole; DESC; deepM3Hole
deep m3 holes; DESC; deepM3Hole

mounting hole; RN; deepM3Hole; VAR
mounting holes; REF; deepM3Hole; DEFINITE
mounting hole; DESC; deepM3Hole
mounting holes; DESC; deepM3Hole


screw; SCREWTYPE; screw;
%screw; SCREWTYPE\SCREWTYPE; #x.$x
m3; SCREWTYPE; m3
m3 screw; SCREWTYPE; m3
deep m3; SCREWTYPE; deepM3

search for; C/DESC; #d.observeDescriptor(?ADDRESSEE,$d,-1)
search for; (C/DESC)/NUM; #n#d.observeDescriptor(?ADDRESSEE,$d,$n)
look for; C/DESC; #d.observeDescriptor(?ADDRESSEE,$d,-1)
look for; (C/DESC)/NUM; #n#d.observeDescriptor(?ADDRESSEE,$d,$n)
left; RN/RN; #x.left($x) ; MOD
right; RN/RN; #x.right($x) ; MOD
top; RN/RN; #x.top($x) ; MOD
bottom; RN/RN; #x.bottom($x) ; MOD

%do you see an m3 hole
see; (C/REF)\AGENT ; #x#y.see($x,$y)
dc; (Q/C) ; #x.$x

%update target torque to 150 millinewton meters
%update max torque to 200 millinewton meters

target torque; PARAM\SCREWTYPE; #s.targetTorque($s)
max torque; PARAM\SCREWTYPE; #s.maxTorque($s)
angle max; PARAM\SCREWTYPE; #s.angleMax($s)
update; ((C/VAL)/TO)/PARAM ; #p#t#v.updateParam(?ADDRESSEE,$p,$v)

%TODO:brad: fix this.
%define new item; C/LIT*; #x.defineItem(?ADDRESSEE,$x)
define new item; C/DESC; #x.defineItem(?ADDRESSEE,$x)

generate robot code for; C/C; #x.translateGoal(?ADDRESSEE,$x)

verify that you can see; C/REF; #r.perceiveEntity(?ADDRESSEE,$r)

on; (C/REF)\REF; #x#y.getOn(?ADDRESSEE,$x,$y)
in; (C/REF)\REF; #x#y.getOn(?ADDRESSEE,$x,$y)
on to; (STATE/REF)\REF; #x#y.on($x,$y)
onto; (STATE/REF)\REF; #x#y.on($x,$y)

setup poses; C; init(?ADDRESSEE)
setup block party poses; C; setupBlockPartyPoses(?ADDRESSEE)
set up block party poses; C; setupBlockPartyPoses(?ADDRESSEE)

init; C; init(?ADDRESSEE)

m3 ネジの目標トルクを 170 ミリニュートンメーターに変更します; C; updateParam(self,targetTorque(m3),val(170,mNm))
m3 ネジの最大トルクを 300 ミリニュートンメーターに変更します; C; updateParam(self,maxTorque(m3),val(300,mNm))
m3 のネジ穴を探してください; C; observeDescriptor(self,m3,-1)
m3 のネジでネジ締めしてくださ; C/REF; #x.screwIn(self,m3,$x)
い; REF; m3; DEFINITE


%TODO:brad: move to a homophones dictionary?
nf-32sv; RN; nf32sv; VAR
nf-32sv; DESC; nf32sv


%TODO:brad:move to a genrated dict
nv30-fau; RN; nv30fau; VAR
nv30-fau; DESC; nv30fau

nf32sv; RN; nf32sv; VAR
nf32sv; DESC; nf32sv

nv30fau; RN; nv30fau; VAR
nv30fau; DESC; nv30fau

prop; RN; prop; VAR
prop; DESC; prop


bottle; RN; bottle; VAR
bottle; DESC; bottle

generate an offline representation for your last goal; C; translateLastGoal(?ADDRESSEE)
generate offline representation for your last goal; C; translateLastGoal(?ADDRESSEE)


that is all; VAL; mod(none,none)
that's all; VAL; mod(none,none)

