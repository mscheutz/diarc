/*
 * Copyright Â© Thinking Robots, Inc., Tufts University, and others 2024.
 */

package edu.tufts.hrilab.vision;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import edu.tufts.hrilab.fol.Factory;
import edu.tufts.hrilab.fol.Symbol;
import edu.tufts.hrilab.vision.capture.calibration.swig.CameraCalibration;
import edu.tufts.hrilab.vision.detector.swig.NativeDetector.DetectorType;
import edu.tufts.hrilab.vision.detector.Detector;
import edu.tufts.hrilab.vision.imgproc.ImageProcessor;
import edu.tufts.hrilab.vision.imgproc.swig.ImageProcessorType;
import edu.tufts.hrilab.vision.tracker.Tracker;
import edu.tufts.hrilab.vision.tracker.swig.NativeTracker.TrackerType;
import edu.tufts.hrilab.fol.Term;
import edu.tufts.hrilab.vision.stm.CompositeSearchManager;
import edu.tufts.hrilab.vision.stm.SearchManager;
import edu.tufts.hrilab.vision.stm.SimpleSearchManager;
import edu.tufts.hrilab.vision.util.PredicateHelper;
import edu.tufts.hrilab.vision.visionproc.VisionProcess;

import java.awt.*;
import javax.swing.*;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.*;
import java.util.List;
import javax.swing.filechooser.FileFilter;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * CameraControlPanel.java
 *
 * Created on Jun 7, 2010, 1:32:51 PM
 */
/**
 *
 * @author evankrause
 */
public class CameraControlPanel extends javax.swing.JFrame {
  //===================================
  //START CCP fields

  private ImageFrame colorSelectionFrame;
  private static ColorHelper.BlobColors blobColors = new ColorHelper.BlobColors();
  private DefaultListModel imgProcs = new DefaultListModel();    //for debugging ImageProcessors from GUI
  //END CCP fields
  //===================================
  //===================================
  //START CCP params
  private final String DEFAULT_PATH = "../vision/native/data/";
  private final String DEFAULT_IMG_PATH = "/dev/shm/";    //if path isnt specified when running on image from file (i.e. cammode -7)
  private final int DEFAULT_MINIMUM_BLOB_SIZE = 300;
  private boolean displayFlag;
  private boolean hasStereo = false;
  //END CCP params
  //===================================
  private static Logger log = LoggerFactory.getLogger(CameraControlPanel.class);
  // START Pipeline GUI variables
  private PipelineWindow pipelineWindow = new PipelineWindow();
  DefaultListModel <SearchManager> availManagers = new DefaultListModel<>();
  // END Pipeline GUI variables


  /**
   * Creates new form CameraControlPanel
   */
  public CameraControlPanel(boolean displayControlPanel,
          boolean showCapture, boolean showDepth,
          boolean hasStereo,
          boolean undistort) {

    initComponents();
    displayFlag = displayControlPanel;
    this.hasStereo = hasStereo;

    //must be called after Vision.init(...)
    //must be called after Vision.init(...)
    initVisionSearchTab();
    initVisionSearchDevTab();
    initVisionProcessorsTab();
    initBlobTabData();
    initCalibrationTab(undistort);

    //System.out.println("show windows: " + showWindows);
    //create display windows based on passed in params
    if (displayFlag) {
      //display capture if requested
      if (showCapture) {
        captureDisplay_chkBx.setSelected(true);
        Vision.camera.displayCapturedImages(true);
      }
      //display depth if requested (and available)
      if (showDepth && depthDisplay_chkBx.isEnabled()) {
        depthDisplay_chkBx.setSelected(true);
        Vision.camera.displayDepthData(true);
      }
    }

    //display window. MUST be called last to avoid GUI init errors (i.e., freezing).
    setVisible(displayFlag);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        camNum_btnGrp = new javax.swing.ButtonGroup();
        saliencyConstraints_popUp = new javax.swing.JPopupMenu();
        saliencyConstraintRemove_menuItm = new javax.swing.JMenuItem();
        saliencyConstraintDisplay_menuItm = new javax.swing.JMenuItem();
        imgProcs_popUp = new javax.swing.JPopupMenu();
        imgProcRemove_MenuItm = new javax.swing.JMenuItem();
        imgProcDisplay_MenuItm = new javax.swing.JMenuItem();
        validatorConstraints_popUp = new javax.swing.JPopupMenu();
        validatorConstraintRemove_menuItm = new javax.swing.JMenuItem();
        validatorConstraintDisplay_menuItm = new javax.swing.JMenuItem();
        cameraControl_tabPanel = new javax.swing.JTabbedPane();
        searchControl_panel = new javax.swing.JPanel();
        availSearches_panel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        availSearches_list = new javax.swing.JList();
        addConstraints_panel = new javax.swing.JPanel();
        addConstraints_btn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        addConstraints_txtArea = new javax.swing.JTextArea();
        existConstraints_panel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        existConstraints_list = new javax.swing.JList();
        rmvConstraints_btn = new javax.swing.JButton();
        rmvSearch_btn = new javax.swing.JButton();
        startSearchType_btn = new javax.swing.JButton();
        stopSearchType_btn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        addSearch_btn = new javax.swing.JButton();
        addSearch_cmbBx = new javax.swing.JComboBox();
        newSearchPreds_txtBx = new javax.swing.JTextField();
        addSearchFromPred_btn = new javax.swing.JButton();
        memObjControl_panel = new javax.swing.JPanel();
        singleSearchManagers_panel = new javax.swing.JPanel();
        singleSearchDetails_tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        detectorDisplay_chkBx = new javax.swing.JCheckBox();
        detectorOptions_cmbBx = new javax.swing.JComboBox();
        jScrollPane9 = new javax.swing.JScrollPane();
        detectorDep_list = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        detectorDepDisplay_chkBx = new javax.swing.JCheckBox();
        detectorSelect_btn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        trackerDisplay_chkBx = new javax.swing.JCheckBox();
        trackerOptions_cmbBx = new javax.swing.JComboBox();
        jScrollPane8 = new javax.swing.JScrollPane();
        trackerDep_list = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        trackerDepDisplay_chkBx = new javax.swing.JCheckBox();
        memObjConstraints_panel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        saliencyConstraints_list = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        validatorConstraints_list = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        addConstraint_btn = new javax.swing.JButton();
        constraintOptns_comBx = new javax.swing.JComboBox();
        saliencyProcs_lbl = new javax.swing.JLabel();
        validationProcs_lbl = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        singleItr_chkBx = new javax.swing.JCheckBox();
        detectorIncProc_chkBx = new javax.swing.JCheckBox();
        constraintsIncProc_chkBx = new javax.swing.JCheckBox();
        serialProc_chkBx = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        imgProcOptions_cmbBx = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        imgProcs_list = new javax.swing.JList();
        imgProcsAdd_btn = new javax.swing.JButton();
        rmvSingleSearch_btn = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        availSingleSearches_list = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        singleSearchDesc_txtArea = new javax.swing.JTextArea();
        startSingleSearch_btn = new javax.swing.JButton();
        stopSingleSearch_btn = new javax.swing.JButton();
        addSimpleSearchManager_btn = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        availImgProcessors_panel = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        availImgProcs_list = new javax.swing.JList();
        availImgProcsDisplay_chkBx = new javax.swing.JCheckBox();
        availSaliencyProcessors_panel = new javax.swing.JPanel();
        availSaliencyProcsDisplay_chkBx = new javax.swing.JCheckBox();
        jScrollPane15 = new javax.swing.JScrollPane();
        availSaliencyProcs_list = new javax.swing.JList();
        availValidators_panel = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        availValidators_list = new javax.swing.JList();
        availValidatorsDisplay_chkBx = new javax.swing.JCheckBox();
        availDetectors_panel = new javax.swing.JPanel();
        availDetectorsDisplay_chkBx = new javax.swing.JCheckBox();
        jScrollPane14 = new javax.swing.JScrollPane();
        availDetectors_list = new javax.swing.JList();
        availTrackers_panel = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        availTrackers_list = new javax.swing.JList();
        availTrackersDisplay_chkBx = new javax.swing.JCheckBox();
        blobSettings_panel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        colorList_list = new javax.swing.JList();
        addColor_btn = new javax.swing.JButton();
        removeColor_btn = new javax.swing.JButton();
        modifyColors_panel = new javax.swing.JPanel();
        modifyColor_cancel_btn = new javax.swing.JButton();
        modifyColor_ok_btn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        modifyColor_lbl = new javax.swing.JLabel();
        startColorRange_btn = new javax.swing.JButton();
        endColorRange_btn = new javax.swing.JButton();
        OR_lbl = new javax.swing.JLabel();
        defineColorRegion_btn = new javax.swing.JButton();
        expandColorRegion_btn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        blobSize_lbl = new javax.swing.JLabel();
        minBlobSize_lbl = new javax.swing.JLabel();
        minBlobSize_txtBx = new javax.swing.JTextField();
        maxBlobSize_lbl = new javax.swing.JLabel();
        maxBlobSize_txtBx = new javax.swing.JTextField();
        colorName_txtBx = new javax.swing.JTextField();
        colorName_lbl = new javax.swing.JLabel();
        openColorFile_btn = new javax.swing.JButton();
        saveColorFile_btn = new javax.swing.JButton();
        camCalibration_panel = new javax.swing.JPanel();
        intrinsicCalib_panel = new javax.swing.JPanel();
        cam1_radioBtn = new javax.swing.JRadioButton();
        cam2_radioBtn = new javax.swing.JRadioButton();
        calcExtrCalib_btn = new javax.swing.JButton();
        calcIntrCalib_btn = new javax.swing.JButton();
        loadSingleCamCalib_btn = new javax.swing.JButton();
        saveSingleCamCalib_btn = new javax.swing.JButton();
        extrinsicCalib_panel = new javax.swing.JPanel();
        calcStereoCalib_btn = new javax.swing.JButton();
        loadStereoCalib_btn = new javax.swing.JButton();
        saveStereoCalib_btn = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        undistort_chkBx = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        takeSnapshot_btn = new javax.swing.JButton();
        cnclCalib_btn = new javax.swing.JButton();
        takeSnapshots_btn = new javax.swing.JButton();
        numSnapshots_txtBx = new javax.swing.JTextField();
        calibrate_btn = new javax.swing.JButton();
        totalSnapshots_txtBx = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        snapshotStatus_lbl = new javax.swing.JLabel();
        numGridCorners_lbl = new javax.swing.JLabel();
        xGridCorners_lbl = new javax.swing.JLabel();
        xGridCorners_txtBx = new javax.swing.JTextField();
        yGridCorners_lbl = new javax.swing.JLabel();
        yGridCorners_txtBx = new javax.swing.JTextField();
        gridSize_lbl = new javax.swing.JLabel();
        gridSize_txtBx = new javax.swing.JTextField();
        other_panel = new javax.swing.JPanel();
        aviWrite_btn = new javax.swing.JButton();
        snapshotRGB_btn = new javax.swing.JButton();
        snapshotPCD_btn = new javax.swing.JButton();
        oniWrite_btn = new javax.swing.JButton();
        captureDisplay_chkBx = new javax.swing.JCheckBox();
        depthDisplay_chkBx = new javax.swing.JCheckBox();
        DisplayPipelineButton = new javax.swing.JCheckBox();
        FPSCheckBox = new javax.swing.JCheckBox();

        saliencyConstraints_popUp.setEnabled(false);

        saliencyConstraintRemove_menuItm.setText("Remove");
        saliencyConstraintRemove_menuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saliencyConstraintRemove_menuItmActionPerformed(evt);
            }
        });
        saliencyConstraints_popUp.add(saliencyConstraintRemove_menuItm);

        saliencyConstraintDisplay_menuItm.setText("Display On");
        saliencyConstraintDisplay_menuItm.setActionCommand("Display");
        saliencyConstraintDisplay_menuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saliencyConstraintDisplay_menuItmActionPerformed(evt);
            }
        });
        saliencyConstraints_popUp.add(saliencyConstraintDisplay_menuItm);

        imgProcRemove_MenuItm.setText("Remove");
        imgProcRemove_MenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgProcRemove_MenuItmActionPerformed(evt);
            }
        });
        imgProcs_popUp.add(imgProcRemove_MenuItm);

        imgProcDisplay_MenuItm.setText("Display On");
        imgProcDisplay_MenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgProcDisplay_MenuItmActionPerformed(evt);
            }
        });
        imgProcs_popUp.add(imgProcDisplay_MenuItm);

        validatorConstraintRemove_menuItm.setText("Remove");
        validatorConstraintRemove_menuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validatorConstraintRemove_menuItmActionPerformed(evt);
            }
        });
        validatorConstraints_popUp.add(validatorConstraintRemove_menuItm);

        validatorConstraintDisplay_menuItm.setText("Display On");
        validatorConstraintDisplay_menuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validatorConstraintDisplay_menuItmActionPerformed(evt);
            }
        });
        validatorConstraints_popUp.add(validatorConstraintDisplay_menuItm);

        setTitle("Camera Control Panel");

        availSearches_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Searches"));

        availSearches_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availSearches_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availSearches_listValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(availSearches_list);

        addConstraints_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("New Constraint(s)"));

        addConstraints_btn.setText("Add Constraint(s)");
        addConstraints_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConstraints_btnActionPerformed(evt);
            }
        });

        addConstraints_txtArea.setEditable(false);
        addConstraints_txtArea.setColumns(20);
        addConstraints_txtArea.setRows(5);
        addConstraints_txtArea.setToolTipText("Enter semi-colon separated predicates. Variables must start with a capital letter.");
        jScrollPane3.setViewportView(addConstraints_txtArea);
        addConstraints_txtArea.getAccessibleContext().setAccessibleDescription("Enter semi-colon separated predicates. Variables must start with a capital letter..");

        javax.swing.GroupLayout addConstraints_panelLayout = new javax.swing.GroupLayout(addConstraints_panel);
        addConstraints_panel.setLayout(addConstraints_panelLayout);
        addConstraints_panelLayout.setHorizontalGroup(
            addConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConstraints_panelLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(addConstraints_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(addConstraints_panelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );
        addConstraints_panelLayout.setVerticalGroup(
            addConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addConstraints_panelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(addConstraints_btn)
                .addContainerGap())
        );

        existConstraints_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Existing Constraint(s)"));

        jScrollPane10.setViewportView(existConstraints_list);

        rmvConstraints_btn.setText("Remove Constraint(s)");
        rmvConstraints_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvConstraints_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout existConstraints_panelLayout = new javax.swing.GroupLayout(existConstraints_panel);
        existConstraints_panel.setLayout(existConstraints_panelLayout);
        existConstraints_panelLayout.setHorizontalGroup(
            existConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(existConstraints_panelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(rmvConstraints_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(existConstraints_panelLayout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        existConstraints_panelLayout.setVerticalGroup(
            existConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(existConstraints_panelLayout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(rmvConstraints_btn)
                .addContainerGap())
        );

        rmvSearch_btn.setText("Remove Search");
        rmvSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvSearch_btnActionPerformed(evt);
            }
        });

        startSearchType_btn.setText("Start");
        startSearchType_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSearchType_btnActionPerformed(evt);
            }
        });

        stopSearchType_btn.setText("Stop");
        stopSearchType_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSearchType_btnActionPerformed(evt);
            }
        });

        jLabel6.setText("Incremental Add/Remove of Constraints Disabled");

        javax.swing.GroupLayout availSearches_panelLayout = new javax.swing.GroupLayout(availSearches_panel);
        availSearches_panel.setLayout(availSearches_panelLayout);
        availSearches_panelLayout.setHorizontalGroup(
            availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availSearches_panelLayout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, availSearches_panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startSearchType_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopSearchType_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rmvSearch_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))
                    .addGroup(availSearches_panelLayout.createSequentialGroup()
                        .addGroup(availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(availSearches_panelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(addConstraints_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(existConstraints_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(availSearches_panelLayout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        availSearches_panelLayout.setVerticalGroup(
            availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, availSearches_panelLayout.createSequentialGroup()
                .addGroup(availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(availSearches_panelLayout.createSequentialGroup()
                        .addGroup(availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rmvSearch_btn)
                            .addComponent(stopSearchType_btn)
                            .addComponent(startSearchType_btn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(availSearches_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addConstraints_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(existConstraints_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addSearch_btn.setText("Add Predfined Search");
        addSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSearch_btnActionPerformed(evt);
            }
        });

        newSearchPreds_txtBx.setToolTipText("Enter semi-colon separated predicates. Variables must start with a capital letter.");

        addSearchFromPred_btn.setText("Add Search From Predicates");
        addSearchFromPred_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSearchFromPred_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchControl_panelLayout = new javax.swing.GroupLayout(searchControl_panel);
        searchControl_panel.setLayout(searchControl_panelLayout);
        searchControl_panelLayout.setHorizontalGroup(
            searchControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchControl_panelLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(availSearches_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(searchControl_panelLayout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addGroup(searchControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newSearchPreds_txtBx)
                    .addComponent(addSearch_cmbBx, 0, 252, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addSearch_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addSearchFromPred_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchControl_panelLayout.setVerticalGroup(
            searchControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchControl_panelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(searchControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSearch_btn)
                    .addComponent(addSearch_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newSearchPreds_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSearchFromPred_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(availSearches_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        cameraControl_tabPanel.addTab("Vision Searches", searchControl_panel);

        singleSearchManagers_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Available SingleSearchManagers"));

        detectorDisplay_chkBx.setText("Display Detector");
        detectorDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorDisplay_chkBxActionPerformed(evt);
            }
        });

        detectorOptions_cmbBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorOptions_cmbBxActionPerformed(evt);
            }
        });

        detectorDep_list.setSelectionModel(new DefaultListSelectionModel() {

            @Override
            public void setSelectionInterval(int index0, int index1) {
                // if already selected, remove:
                if (isSelectedIndex(index0)) {
                    super.removeSelectionInterval(index0, index1);
                } // otherwise, add new one to existing selection
                else {
                    super.addSelectionInterval(index0, index1);
                }
            }
        });
        detectorDep_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                detectorDep_listValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(detectorDep_list);

        jLabel1.setText("Detector Options");

        jLabel2.setText("Detector Dependencies");

        detectorDepDisplay_chkBx.setText("Display Selected Dependencies");
        detectorDepDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorDepDisplay_chkBxActionPerformed(evt);
            }
        });

        detectorSelect_btn.setText("Select Detector");
        detectorSelect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorSelect_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(86, 86, 86))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(detectorOptions_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(detectorSelect_btn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(detectorDisplay_chkBx)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detectorDepDisplay_chkBx)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(detectorOptions_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(detectorSelect_btn))
                    .addComponent(jScrollPane9, 0, 113, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(detectorDisplay_chkBx)
                    .addComponent(detectorDepDisplay_chkBx))
                .addGap(42, 42, 42))
        );

        singleSearchDetails_tab.addTab("Detectors", jPanel1);

        trackerDisplay_chkBx.setText("Display Tracker");
        trackerDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackerDisplay_chkBxActionPerformed(evt);
            }
        });

        trackerOptions_cmbBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackerOptions_cmbBxActionPerformed(evt);
            }
        });

        trackerDep_list.setSelectionModel(new DefaultListSelectionModel() {

            @Override
            public void setSelectionInterval(int index0, int index1) {
                // if already selected, remove:
                if (isSelectedIndex(index0)) {
                    super.removeSelectionInterval(index0, index1);
                } // otherwise, add new one to existing selection
                else {
                    super.addSelectionInterval(index0, index1);
                }
            }
        });
        trackerDep_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                trackerDep_listValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(trackerDep_list);

        jLabel3.setText("Tracker Options");

        jLabel4.setText("Tracker Dependencies");

        trackerDepDisplay_chkBx.setText("Display Selected Dependencies");
        trackerDepDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackerDepDisplay_chkBxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(76, 76, 76))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(trackerOptions_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(trackerDisplay_chkBx)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trackerDepDisplay_chkBx)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(trackerDepDisplay_chkBx))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(trackerOptions_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(trackerDisplay_chkBx)))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        singleSearchDetails_tab.addTab("Trackers", jPanel6);

        saliencyConstraints_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        saliencyConstraints_list.setComponentPopupMenu(saliencyConstraints_popUp);
        saliencyConstraints_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                saliencyConstraints_listValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(saliencyConstraints_list);

        validatorConstraints_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        validatorConstraints_list.setComponentPopupMenu(validatorConstraints_popUp);
        validatorConstraints_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                validatorConstraints_listValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(validatorConstraints_list);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("New Constraint"));

        addConstraint_btn.setText("Add Constraint");
        addConstraint_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConstraint_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(constraintOptns_comBx, 0, 274, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(addConstraint_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constraintOptns_comBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addConstraint_btn))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        saliencyProcs_lbl.setText("Saliency Processors");

        validationProcs_lbl.setText("Validation Processors");

        javax.swing.GroupLayout memObjConstraints_panelLayout = new javax.swing.GroupLayout(memObjConstraints_panel);
        memObjConstraints_panel.setLayout(memObjConstraints_panelLayout);
        memObjConstraints_panelLayout.setHorizontalGroup(
            memObjConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memObjConstraints_panelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(saliencyProcs_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(validationProcs_lbl)
                .addGap(76, 76, 76))
            .addGroup(memObjConstraints_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addGap(24, 24, 24))
            .addGroup(memObjConstraints_panelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        memObjConstraints_panelLayout.setVerticalGroup(
            memObjConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, memObjConstraints_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(memObjConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saliencyProcs_lbl)
                    .addComponent(validationProcs_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(memObjConstraints_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        singleSearchDetails_tab.addTab("Constraints", memObjConstraints_panel);

        singleItr_chkBx.setText("Single Iteration (ImgProcs and Detector))");
        singleItr_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleItr_chkBxActionPerformed(evt);
            }
        });

        detectorIncProc_chkBx.setText("Incremental Detector");
        detectorIncProc_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorIncProc_chkBxActionPerformed(evt);
            }
        });

        constraintsIncProc_chkBx.setText("Incremental Image Processors");
        constraintsIncProc_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constraintsIncProc_chkBxActionPerformed(evt);
            }
        });

        serialProc_chkBx.setText("Serial Processing");
        serialProc_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialProc_chkBxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serialProc_chkBx)
                    .addComponent(constraintsIncProc_chkBx)
                    .addComponent(detectorIncProc_chkBx)
                    .addComponent(singleItr_chkBx))
                .addContainerGap(372, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(constraintsIncProc_chkBx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detectorIncProc_chkBx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serialProc_chkBx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleItr_chkBx)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        singleSearchDetails_tab.addTab("Flags", jPanel8);

        imgProcOptions_cmbBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        imgProcs_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        imgProcs_list.setComponentPopupMenu(imgProcs_popUp);
        imgProcs_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                imgProcs_listValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(imgProcs_list);

        imgProcsAdd_btn.setText("Add");
        imgProcsAdd_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgProcsAdd_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(imgProcOptions_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(imgProcsAdd_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(imgProcOptions_cmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(imgProcsAdd_btn)))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        singleSearchDetails_tab.addTab("Image Processors (Debug)", jPanel9);

        rmvSingleSearch_btn.setText("Remove Type");
        rmvSingleSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvSingleSearch_btnActionPerformed(evt);
            }
        });

        availSingleSearches_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availSingleSearches_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availSingleSearches_listValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(availSingleSearches_list);

        singleSearchDesc_txtArea.setEditable(false);
        singleSearchDesc_txtArea.setColumns(20);
        singleSearchDesc_txtArea.setLineWrap(true);
        singleSearchDesc_txtArea.setRows(3);
        jScrollPane6.setViewportView(singleSearchDesc_txtArea);

        startSingleSearch_btn.setText("Start");
        startSingleSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSingleSearch_btnActionPerformed(evt);
            }
        });

        stopSingleSearch_btn.setText("Stop");
        stopSingleSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSingleSearch_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout singleSearchManagers_panelLayout = new javax.swing.GroupLayout(singleSearchManagers_panel);
        singleSearchManagers_panel.setLayout(singleSearchManagers_panelLayout);
        singleSearchManagers_panelLayout.setHorizontalGroup(
            singleSearchManagers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(singleSearchDetails_tab)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, singleSearchManagers_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(singleSearchManagers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(singleSearchManagers_panelLayout.createSequentialGroup()
                        .addComponent(startSingleSearch_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopSingleSearch_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(rmvSingleSearch_btn))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        singleSearchManagers_panelLayout.setVerticalGroup(
            singleSearchManagers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, singleSearchManagers_panelLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(singleSearchManagers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(singleSearchManagers_panelLayout.createSequentialGroup()
                        .addGroup(singleSearchManagers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startSingleSearch_btn)
                            .addComponent(stopSingleSearch_btn)
                            .addComponent(rmvSingleSearch_btn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(singleSearchDetails_tab, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        addSimpleSearchManager_btn.setText("Add SimpleSearchManager");
        addSimpleSearchManager_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSimpleSearchManager_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout memObjControl_panelLayout = new javax.swing.GroupLayout(memObjControl_panel);
        memObjControl_panel.setLayout(memObjControl_panelLayout);
        memObjControl_panelLayout.setHorizontalGroup(
            memObjControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memObjControl_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(memObjControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleSearchManagers_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSimpleSearchManager_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        memObjControl_panelLayout.setVerticalGroup(
            memObjControl_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memObjControl_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addSimpleSearchManager_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleSearchManagers_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cameraControl_tabPanel.addTab("Vision Searches (dev)", memObjControl_panel);

        availImgProcs_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availImgProcs_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availImgProcs_listValueChanged(evt);
            }
        });
        jScrollPane16.setViewportView(availImgProcs_list);

        availImgProcsDisplay_chkBx.setText("Display");
        availImgProcsDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availImgProcsDisplay_chkBxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addComponent(availImgProcsDisplay_chkBx)
                .addContainerGap(262, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(availImgProcsDisplay_chkBx)))
                .addContainerGap(228, Short.MAX_VALUE))
        );

        availImgProcessors_panel.addTab("Image Processors", jPanel11);

        availSaliencyProcsDisplay_chkBx.setText("Display");
        availSaliencyProcsDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availSaliencyProcsDisplay_chkBxActionPerformed(evt);
            }
        });

        availSaliencyProcs_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availSaliencyProcs_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availSaliencyProcs_listValueChanged(evt);
            }
        });
        jScrollPane15.setViewportView(availSaliencyProcs_list);

        javax.swing.GroupLayout availSaliencyProcessors_panelLayout = new javax.swing.GroupLayout(availSaliencyProcessors_panel);
        availSaliencyProcessors_panel.setLayout(availSaliencyProcessors_panelLayout);
        availSaliencyProcessors_panelLayout.setHorizontalGroup(
            availSaliencyProcessors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availSaliencyProcessors_panelLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addComponent(availSaliencyProcsDisplay_chkBx)
                .addContainerGap(277, Short.MAX_VALUE))
        );
        availSaliencyProcessors_panelLayout.setVerticalGroup(
            availSaliencyProcessors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availSaliencyProcessors_panelLayout.createSequentialGroup()
                .addGroup(availSaliencyProcessors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(availSaliencyProcessors_panelLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(availSaliencyProcsDisplay_chkBx))
                    .addGroup(availSaliencyProcessors_panelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(224, Short.MAX_VALUE))
        );

        availImgProcessors_panel.addTab("Saliency Processors", availSaliencyProcessors_panel);

        availValidators_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availValidators_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availValidators_listValueChanged(evt);
            }
        });
        jScrollPane13.setViewportView(availValidators_list);

        availValidatorsDisplay_chkBx.setText("Display");
        availValidatorsDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availValidatorsDisplay_chkBxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout availValidators_panelLayout = new javax.swing.GroupLayout(availValidators_panel);
        availValidators_panel.setLayout(availValidators_panelLayout);
        availValidators_panelLayout.setHorizontalGroup(
            availValidators_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availValidators_panelLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(availValidatorsDisplay_chkBx)
                .addContainerGap(254, Short.MAX_VALUE))
        );
        availValidators_panelLayout.setVerticalGroup(
            availValidators_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availValidators_panelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(availValidators_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(availValidatorsDisplay_chkBx)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );

        availImgProcessors_panel.addTab("Validators", availValidators_panel);

        availDetectorsDisplay_chkBx.setText("Display");
        availDetectorsDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availDetectorsDisplay_chkBxActionPerformed(evt);
            }
        });

        availDetectors_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availDetectors_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availDetectors_listValueChanged(evt);
            }
        });
        jScrollPane14.setViewportView(availDetectors_list);

        javax.swing.GroupLayout availDetectors_panelLayout = new javax.swing.GroupLayout(availDetectors_panel);
        availDetectors_panel.setLayout(availDetectors_panelLayout);
        availDetectors_panelLayout.setHorizontalGroup(
            availDetectors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availDetectors_panelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133)
                .addComponent(availDetectorsDisplay_chkBx)
                .addContainerGap(247, Short.MAX_VALUE))
        );
        availDetectors_panelLayout.setVerticalGroup(
            availDetectors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availDetectors_panelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(availDetectors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availDetectorsDisplay_chkBx))
                .addContainerGap(225, Short.MAX_VALUE))
        );

        availImgProcessors_panel.addTab("Detectors", availDetectors_panel);

        availTrackers_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availTrackers_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availTrackers_listValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(availTrackers_list);

        availTrackersDisplay_chkBx.setText("Display");
        availTrackersDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availTrackersDisplay_chkBxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout availTrackers_panelLayout = new javax.swing.GroupLayout(availTrackers_panel);
        availTrackers_panel.setLayout(availTrackers_panelLayout);
        availTrackers_panelLayout.setHorizontalGroup(
            availTrackers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availTrackers_panelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(availTrackersDisplay_chkBx)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        availTrackers_panelLayout.setVerticalGroup(
            availTrackers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availTrackers_panelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(availTrackers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availTrackersDisplay_chkBx))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        availImgProcessors_panel.addTab("Trackers", availTrackers_panel);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(availImgProcessors_panel)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(availImgProcessors_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        availImgProcessors_panel.getAccessibleContext().setAccessibleName("Vision Processors");

        cameraControl_tabPanel.addTab("VisionProcessors", jPanel10);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setEnabled(false);

        colorList_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        colorList_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colorList_listValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(colorList_list);

        addColor_btn.setText("Add Color Range");
        addColor_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColor_btnActionPerformed(evt);
            }
        });

        removeColor_btn.setText("Remove Color Range");
        removeColor_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColor_btnActionPerformed(evt);
            }
        });

        modifyColors_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Modify Selected Color"));

        modifyColor_cancel_btn.setText("Revert");
        modifyColor_cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyColor_cancel_btnActionPerformed(evt);
            }
        });

        modifyColor_ok_btn.setText("OK");
        modifyColor_ok_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyColor_ok_btnActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        modifyColor_lbl.setText("Modify RGB Values");

        startColorRange_btn.setText("Start Color");
        startColorRange_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startColorRange_btnActionPerformed(evt);
            }
        });

        endColorRange_btn.setText("End Region");
        endColorRange_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endColorRange_btnActionPerformed(evt);
            }
        });

        OR_lbl.setText("OR");

        defineColorRegion_btn.setText("Define Color");
        defineColorRegion_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defineColorRegion_btnActionPerformed(evt);
            }
        });

        expandColorRegion_btn.setText("Expand Color");
        expandColorRegion_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandColorRegion_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(OR_lbl))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(startColorRange_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(endColorRange_btn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(defineColorRegion_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expandColorRegion_btn)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modifyColor_lbl)
                            .addGap(34, 34, 34))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifyColor_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endColorRange_btn)
                    .addComponent(startColorRange_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OR_lbl)
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defineColorRegion_btn)
                    .addComponent(expandColorRegion_btn))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        blobSize_lbl.setText("Blob Sizes");

        minBlobSize_lbl.setText("Min:");

        minBlobSize_txtBx.setText("0");

        maxBlobSize_lbl.setText("Max:");

        maxBlobSize_txtBx.setText("inf");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(blobSize_lbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(minBlobSize_lbl)
                .addGap(5, 5, 5)
                .addComponent(minBlobSize_txtBx)
                .addGap(18, 18, 18)
                .addComponent(maxBlobSize_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxBlobSize_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blobSize_lbl)
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minBlobSize_lbl)
                    .addComponent(minBlobSize_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxBlobSize_lbl)
                    .addComponent(maxBlobSize_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout modifyColors_panelLayout = new javax.swing.GroupLayout(modifyColors_panel);
        modifyColors_panel.setLayout(modifyColors_panelLayout);
        modifyColors_panelLayout.setHorizontalGroup(
            modifyColors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyColors_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyColors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyColors_panelLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(modifyColor_ok_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modifyColor_cancel_btn))
                    .addGroup(modifyColors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modifyColors_panelLayout.setVerticalGroup(
            modifyColors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyColors_panelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(modifyColors_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyColor_cancel_btn)
                    .addComponent(modifyColor_ok_btn))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        colorName_txtBx.setText("ColorName");

        colorName_lbl.setText("Name");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addColor_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(removeColor_btn))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(colorName_lbl)
                        .addGap(18, 18, 18)
                        .addComponent(colorName_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)))
                .addComponent(modifyColors_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modifyColors_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorName_lbl)
                            .addComponent(colorName_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addColor_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeColor_btn)
                        .addGap(36, 36, 36)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        openColorFile_btn.setText("Load Color File");
        openColorFile_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openColorFile_btnActionPerformed(evt);
            }
        });

        saveColorFile_btn.setText("Save Color File");
        saveColorFile_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveColorFile_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blobSettings_panelLayout = new javax.swing.GroupLayout(blobSettings_panel);
        blobSettings_panel.setLayout(blobSettings_panelLayout);
        blobSettings_panelLayout.setHorizontalGroup(
            blobSettings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blobSettings_panelLayout.createSequentialGroup()
                .addGroup(blobSettings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blobSettings_panelLayout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(openColorFile_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveColorFile_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blobSettings_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        blobSettings_panelLayout.setVerticalGroup(
            blobSettings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blobSettings_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(blobSettings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openColorFile_btn)
                    .addComponent(saveColorFile_btn))
                .addContainerGap())
        );

        cameraControl_tabPanel.addTab("Blob Parameters", blobSettings_panel);

        intrinsicCalib_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Single Camera Parameters"));

        camNum_btnGrp.add(cam1_radioBtn);
        cam1_radioBtn.setSelected(true);
        cam1_radioBtn.setText("Camera 1");

        camNum_btnGrp.add(cam2_radioBtn);
        cam2_radioBtn.setText("Camera 2");

        calcExtrCalib_btn.setText("Calibrate Extrinic Params");
        calcExtrCalib_btn.setToolTipText("Intrinsic Parameters must first be calculated.");
        calcExtrCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcExtrCalib_btnActionPerformed(evt);
            }
        });

        calcIntrCalib_btn.setText("Calibrate Intrinic Params");
        calcIntrCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcIntrCalib_btnActionPerformed(evt);
            }
        });

        loadSingleCamCalib_btn.setText("Load");
        loadSingleCamCalib_btn.setToolTipText("Loads both intrinsic and extrinsic parameters.");
        loadSingleCamCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSingleCamCalib_btnActionPerformed(evt);
            }
        });

        saveSingleCamCalib_btn.setText("Save");
        saveSingleCamCalib_btn.setToolTipText("Saves both intrinsic and extrinsic parameters.");
        saveSingleCamCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSingleCamCalib_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout intrinsicCalib_panelLayout = new javax.swing.GroupLayout(intrinsicCalib_panel);
        intrinsicCalib_panel.setLayout(intrinsicCalib_panelLayout);
        intrinsicCalib_panelLayout.setHorizontalGroup(
            intrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(intrinsicCalib_panelLayout.createSequentialGroup()
                .addGroup(intrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(intrinsicCalib_panelLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(intrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(intrinsicCalib_panelLayout.createSequentialGroup()
                                .addComponent(cam1_radioBtn)
                                .addGap(30, 30, 30)
                                .addComponent(cam2_radioBtn))
                            .addComponent(calcIntrCalib_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calcExtrCalib_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(intrinsicCalib_panelLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(loadSingleCamCalib_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveSingleCamCalib_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        intrinsicCalib_panelLayout.setVerticalGroup(
            intrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(intrinsicCalib_panelLayout.createSequentialGroup()
                .addGroup(intrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cam1_radioBtn)
                    .addComponent(cam2_radioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calcIntrCalib_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcExtrCalib_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(intrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveSingleCamCalib_btn)
                    .addComponent(loadSingleCamCalib_btn))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        extrinsicCalib_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Stereo Camera Parameters"));

        calcStereoCalib_btn.setText("Calibrate");
        calcStereoCalib_btn.setToolTipText("Single camera intrinsic parameters must first be calculated.");
        calcStereoCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcStereoCalib_btnActionPerformed(evt);
            }
        });

        loadStereoCalib_btn.setText("Load");
        loadStereoCalib_btn.setToolTipText("Loads stereo params as well as intrinsic and extrinsic parameters for both cameras.");
        loadStereoCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadStereoCalib_btnActionPerformed(evt);
            }
        });

        saveStereoCalib_btn.setText("Save");
        saveStereoCalib_btn.setToolTipText("Saves stereo params as well as intrinsic and extrinsic parameters for both cameras.");
        saveStereoCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStereoCalib_btnActionPerformed(evt);
            }
        });

        jTextField2.setText("jTextField2");

        javax.swing.GroupLayout extrinsicCalib_panelLayout = new javax.swing.GroupLayout(extrinsicCalib_panel);
        extrinsicCalib_panel.setLayout(extrinsicCalib_panelLayout);
        extrinsicCalib_panelLayout.setHorizontalGroup(
            extrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extrinsicCalib_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calcStereoCalib_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(loadStereoCalib_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(saveStereoCalib_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        extrinsicCalib_panelLayout.setVerticalGroup(
            extrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extrinsicCalib_panelLayout.createSequentialGroup()
                .addGroup(extrinsicCalib_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calcStereoCalib_btn)
                    .addComponent(saveStereoCalib_btn)
                    .addComponent(loadStereoCalib_btn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        undistort_chkBx.setText("Undistort Captured Frames");
        undistort_chkBx.setToolTipText("Must deselect to calibrate cameras.");
        undistort_chkBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                undistort_chkBxItemStateChanged(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Calibration Snapshots"));

        takeSnapshot_btn.setText("Take Snapshot");
        takeSnapshot_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeSnapshot_btnActionPerformed(evt);
            }
        });

        cnclCalib_btn.setText("Cancel Calibration");
        cnclCalib_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnclCalib_btnActionPerformed(evt);
            }
        });

        takeSnapshots_btn.setText("Take Snapshots");
        takeSnapshots_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeSnapshots_btnActionPerformed(evt);
            }
        });

        numSnapshots_txtBx.setText("10");
        numSnapshots_txtBx.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numSnapshots_txtBxKeyTyped(evt);
            }
        });

        calibrate_btn.setText("Calibrate");
        calibrate_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibrate_btnActionPerformed(evt);
            }
        });

        totalSnapshots_txtBx.setEditable(false);
        totalSnapshots_txtBx.setColumns(2);
        totalSnapshots_txtBx.setText("0");

        jLabel5.setText("Total Snapshots:");

        snapshotStatus_lbl.setText("Snapshot Status");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cnclCalib_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(calibrate_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(takeSnapshots_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(numSnapshots_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addComponent(takeSnapshot_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(totalSnapshots_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(snapshotStatus_lbl)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalSnapshots_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(snapshotStatus_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(takeSnapshot_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(takeSnapshots_btn)
                    .addComponent(numSnapshots_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calibrate_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cnclCalib_btn)
                .addContainerGap())
        );

        numGridCorners_lbl.setText("Number of Grid Corners");

        xGridCorners_lbl.setText("X:");

        xGridCorners_txtBx.setText("7");
        xGridCorners_txtBx.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                xGridCorners_txtBxKeyTyped(evt);
            }
        });

        yGridCorners_lbl.setText("Y:");

        yGridCorners_txtBx.setText("6");
        yGridCorners_txtBx.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yGridCorners_txtBxKeyTyped(evt);
            }
        });

        gridSize_lbl.setText("Grid Size (m):");

        gridSize_txtBx.setText("0.108");

        javax.swing.GroupLayout camCalibration_panelLayout = new javax.swing.GroupLayout(camCalibration_panel);
        camCalibration_panel.setLayout(camCalibration_panelLayout);
        camCalibration_panelLayout.setHorizontalGroup(
            camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(camCalibration_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, camCalibration_panelLayout.createSequentialGroup()
                        .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(undistort_chkBx)
                            .addComponent(intrinsicCalib_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extrinsicCalib_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, camCalibration_panelLayout.createSequentialGroup()
                        .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numGridCorners_lbl)
                            .addGroup(camCalibration_panelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(xGridCorners_lbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xGridCorners_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yGridCorners_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(yGridCorners_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(94, 94, 94)
                        .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gridSize_lbl)
                            .addGroup(camCalibration_panelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(gridSize_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(250, 250, 250))))
        );
        camCalibration_panelLayout.setVerticalGroup(
            camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(camCalibration_panelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(camCalibration_panelLayout.createSequentialGroup()
                        .addComponent(numGridCorners_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(xGridCorners_lbl)
                            .addComponent(xGridCorners_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yGridCorners_lbl)
                            .addComponent(yGridCorners_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(camCalibration_panelLayout.createSequentialGroup()
                        .addComponent(gridSize_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridSize_txtBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(camCalibration_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(camCalibration_panelLayout.createSequentialGroup()
                        .addComponent(extrinsicCalib_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(intrinsicCalib_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(undistort_chkBx)
                .addGap(44, 44, 44))
        );

        extrinsicCalib_panel.getAccessibleContext().setAccessibleName("null");

        cameraControl_tabPanel.addTab("Camera Calibration", camCalibration_panel);

        aviWrite_btn.setText("Start Record (RGB)");
        aviWrite_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aviWrite_btnActionPerformed(evt);
            }
        });

        snapshotRGB_btn.setText("Take Snapshot (RGB)");
        snapshotRGB_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotRGB_btnActionPerformed(evt);
            }
        });

        snapshotPCD_btn.setText("Take Snapshot (RGB-D)");
        snapshotPCD_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapshotPCD_btnActionPerformed(evt);
            }
        });

        oniWrite_btn.setText("Start Record (RGB-D)");
        oniWrite_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oniWrite_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout other_panelLayout = new javax.swing.GroupLayout(other_panel);
        other_panel.setLayout(other_panelLayout);
        other_panelLayout.setHorizontalGroup(
            other_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, other_panelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(other_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(aviWrite_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(oniWrite_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(other_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(snapshotPCD_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(snapshotRGB_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(366, 366, 366))
        );
        other_panelLayout.setVerticalGroup(
            other_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(other_panelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(other_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(other_panelLayout.createSequentialGroup()
                        .addComponent(snapshotRGB_btn)
                        .addGap(31, 31, 31)
                        .addGroup(other_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(snapshotPCD_btn)
                            .addComponent(oniWrite_btn)))
                    .addComponent(aviWrite_btn))
                .addContainerGap(404, Short.MAX_VALUE))
        );

        cameraControl_tabPanel.addTab("Other", other_panel);

        captureDisplay_chkBx.setText("Display Capture");
        captureDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureDisplay_chkBxActionPerformed(evt);
            }
        });

        depthDisplay_chkBx.setText("Display Depth");
        depthDisplay_chkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depthDisplay_chkBxActionPerformed(evt);
            }
        });

        DisplayPipelineButton.setText("Display Pipeline");
        DisplayPipelineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayPipelineButtonActionPerformed(evt);
            }
        });

        FPSCheckBox.setText("Display FPS");
        FPSCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FPSCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FPSCheckBox)
                .addGap(12, 12, 12)
                .addComponent(captureDisplay_chkBx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(depthDisplay_chkBx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DisplayPipelineButton)
                .addContainerGap())
            .addComponent(cameraControl_tabPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cameraControl_tabPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(captureDisplay_chkBx)
                    .addComponent(depthDisplay_chkBx)
                    .addComponent(DisplayPipelineButton)
                    .addComponent(FPSCheckBox)))
        );

        cameraControl_tabPanel.getAccessibleContext().setAccessibleName("Vision Searches (dev)");

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void captureDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureDisplay_chkBxActionPerformed
          Vision.camera.displayCapturedImages(captureDisplay_chkBx.isSelected());
        }//GEN-LAST:event_captureDisplay_chkBxActionPerformed

        private void depthDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depthDisplay_chkBxActionPerformed
          Vision.camera.displayDepthData(depthDisplay_chkBx.isSelected());
        }//GEN-LAST:event_depthDisplay_chkBxActionPerformed

    private void imgProcRemove_MenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgProcRemove_MenuItmActionPerformed
      // Stop and Remove selected image processor
      if (imgProcs_list.getSelectedIndex() == -1) {
        return;
      }

      //release imgProc from factory and remove from gui list
      int selectedIndex = imgProcs_list.getSelectedIndex();
      ImageProcessor imgProc = (ImageProcessor) imgProcs_list.getSelectedValue();
      imgProc.setDisplayFlag(false);
      imgProc.stop(this, true);

      //find which imgProc factory it came from -- is there a better way to do this?
      ImageProcessorType imgProcType = imgProc.getType();
      if (Vision.availableSaliencyProcessors.hasCapableProcessorType(imgProcType)) {
        Vision.availableSaliencyProcessors.release(this, imgProc);
      } else if (Vision.availableValidationProcessors.hasCapableProcessorType(imgProcType)) {
        Vision.availableValidationProcessors.release(this, imgProc);
      } else if (Vision.availableImageProcessors.hasCapableProcessorType(imgProcType)) {
        Vision.availableImageProcessors.release(this, imgProc);
      }

      imgProcs.removeElement(imgProc);

      //make sure something is selected after removal
      int numItems = imgProcs_list.getModel().getSize();
      if (numItems > 0) {
        if (selectedIndex - 1 >= 0) {
          imgProcs_list.setSelectedIndex(selectedIndex - 1);
        } else {
          imgProcs_list.setSelectedIndex(selectedIndex);
        }
      }
    }//GEN-LAST:event_imgProcRemove_MenuItmActionPerformed

    private void imgProcDisplay_MenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgProcDisplay_MenuItmActionPerformed
      // toggle display of selected image processor
      if (imgProcs_list.getSelectedIndex() == -1) {
        return;
      }

      ImageProcessor imgProc = (ImageProcessor) imgProcs_list.getSelectedValue();
      if (imgProcDisplay_MenuItm.getText().equalsIgnoreCase("display on")) {
        imgProcDisplay_MenuItm.setText("Display Off");
        imgProc.setDisplayFlag(true);
      } else {
        imgProcDisplay_MenuItm.setText("Display On");
        imgProc.setDisplayFlag(false);
      }
    }//GEN-LAST:event_imgProcDisplay_MenuItmActionPerformed
    private void saliencyConstraintRemove_menuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saliencyConstraintRemove_menuItmActionPerformed
      // Remove selected image processor
      if (saliencyConstraints_list.getSelectedIndex() == -1) {
        return;
      }

      //TODO: release saliency constraint from memory object type
      //make sure something is selected after removal
        /*
       int numItems = saliencyConstraints_list.getModel().getSize();
       if (numItems > 0) {
       if (selectedIndex - 1 >= 0) {
       saliencyConstraints_list.setSelectedIndex(selectedIndex - 1);
       } else {
       saliencyConstraints_list.setSelectedIndex(selectedIndex);
       }
       }
       */
    }//GEN-LAST:event_saliencyConstraintRemove_menuItmActionPerformed

    private void saliencyConstraintDisplay_menuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saliencyConstraintDisplay_menuItmActionPerformed
      // toggle display of selected image processor
      if (saliencyConstraints_list.getSelectedIndex() == -1) {
        return;
      }

      ImageProcessor imgProc = (ImageProcessor) saliencyConstraints_list.getSelectedValue();
      if (saliencyConstraintDisplay_menuItm.getText().equalsIgnoreCase("display on")) {
        saliencyConstraintDisplay_menuItm.setText("Display Off");
        imgProc.setDisplayFlag(true);
      } else {
        saliencyConstraintDisplay_menuItm.setText("Display On");
        imgProc.setDisplayFlag(false);
      }
    }//GEN-LAST:event_saliencyConstraintDisplay_menuItmActionPerformed

    private void validatorConstraintRemove_menuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validatorConstraintRemove_menuItmActionPerformed
      // Remove selected image processor
      if (saliencyConstraints_list.getSelectedIndex() == -1) {
        return;
      }

      //TODO: release saliency constraint from memory object type
      //make sure something is selected after removal
        /*
       int numItems = saliencyConstraints_list.getModel().getSize();
       if (numItems > 0) {
       if (selectedIndex - 1 >= 0) {
       saliencyConstraints_list.setSelectedIndex(selectedIndex - 1);
       } else {
       saliencyConstraints_list.setSelectedIndex(selectedIndex);
       }
       }
       */
    }//GEN-LAST:event_validatorConstraintRemove_menuItmActionPerformed

    private void validatorConstraintDisplay_menuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validatorConstraintDisplay_menuItmActionPerformed
      // toggle display of selected image processor
      if (validatorConstraints_list.getSelectedIndex() == -1) {
        return;
      }

      ImageProcessor imgProc = (ImageProcessor) validatorConstraints_list.getSelectedValue();
      if (validatorConstraintDisplay_menuItm.getText().equalsIgnoreCase("display on")) {
        validatorConstraintDisplay_menuItm.setText("Display Off");
        imgProc.setDisplayFlag(true);
      } else {
        validatorConstraintDisplay_menuItm.setText("Display On");
        imgProc.setDisplayFlag(false);
      }
    }//GEN-LAST:event_validatorConstraintDisplay_menuItmActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        final String dataDir = "../../native/data/";
        //Vision vision = new Vision();
        Vision.init(true,
                "", "",
                dataDir + "detectors/detectors.xml", dataDir + "trackers/trackers.xml", dataDir + "imgProcs/imgProcs.xml",
                dataDir + "imgProcs/saliencyProcs.xml", dataDir + "imgProcs/validationProcs.xml", dataDir + "moTypes/moTypes.xml",
                dataDir + "learners/learners.xml",
                dataDir + "logging/log4cxx.txt",
                new ArrayList(),
                new ArrayList(),
                null,new ArrayList<>());
      }
    });
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox DisplayPipelineButton;
    private javax.swing.JCheckBox FPSCheckBox;
    private javax.swing.JLabel OR_lbl;
    private javax.swing.JButton addColor_btn;
    private javax.swing.JButton addConstraint_btn;
    private javax.swing.JButton addConstraints_btn;
    private javax.swing.JPanel addConstraints_panel;
    private javax.swing.JTextArea addConstraints_txtArea;
    private javax.swing.JButton addSearchFromPred_btn;
    private javax.swing.JButton addSearch_btn;
    private javax.swing.JComboBox addSearch_cmbBx;
    private javax.swing.JButton addSimpleSearchManager_btn;
    private javax.swing.JCheckBox availDetectorsDisplay_chkBx;
    private javax.swing.JList availDetectors_list;
    private javax.swing.JPanel availDetectors_panel;
    private javax.swing.JTabbedPane availImgProcessors_panel;
    private javax.swing.JCheckBox availImgProcsDisplay_chkBx;
    private javax.swing.JList availImgProcs_list;
    private javax.swing.JPanel availSaliencyProcessors_panel;
    private javax.swing.JCheckBox availSaliencyProcsDisplay_chkBx;
    private javax.swing.JList availSaliencyProcs_list;
    private javax.swing.JList availSearches_list;
    private javax.swing.JPanel availSearches_panel;
    private javax.swing.JList availSingleSearches_list;
    private javax.swing.JCheckBox availTrackersDisplay_chkBx;
    private javax.swing.JList availTrackers_list;
    private javax.swing.JPanel availTrackers_panel;
    private javax.swing.JCheckBox availValidatorsDisplay_chkBx;
    private javax.swing.JList availValidators_list;
    private javax.swing.JPanel availValidators_panel;
    private javax.swing.JButton aviWrite_btn;
    private javax.swing.JPanel blobSettings_panel;
    private javax.swing.JLabel blobSize_lbl;
    private javax.swing.JButton calcExtrCalib_btn;
    private javax.swing.JButton calcIntrCalib_btn;
    private javax.swing.JButton calcStereoCalib_btn;
    private javax.swing.JButton calibrate_btn;
    private javax.swing.JRadioButton cam1_radioBtn;
    private javax.swing.JRadioButton cam2_radioBtn;
    private javax.swing.JPanel camCalibration_panel;
    private javax.swing.ButtonGroup camNum_btnGrp;
    private javax.swing.JTabbedPane cameraControl_tabPanel;
    private javax.swing.JCheckBox captureDisplay_chkBx;
    private javax.swing.JButton cnclCalib_btn;
    private javax.swing.JList colorList_list;
    private javax.swing.JLabel colorName_lbl;
    private javax.swing.JTextField colorName_txtBx;
    private javax.swing.JComboBox constraintOptns_comBx;
    private javax.swing.JCheckBox constraintsIncProc_chkBx;
    private javax.swing.JButton defineColorRegion_btn;
    private javax.swing.JCheckBox depthDisplay_chkBx;
    private javax.swing.JCheckBox detectorDepDisplay_chkBx;
    private javax.swing.JList detectorDep_list;
    private javax.swing.JCheckBox detectorDisplay_chkBx;
    private javax.swing.JCheckBox detectorIncProc_chkBx;
    private javax.swing.JComboBox detectorOptions_cmbBx;
    private javax.swing.JButton detectorSelect_btn;
    private javax.swing.JButton endColorRange_btn;
    private javax.swing.JList existConstraints_list;
    private javax.swing.JPanel existConstraints_panel;
    private javax.swing.JButton expandColorRegion_btn;
    private javax.swing.JPanel extrinsicCalib_panel;
    private javax.swing.JLabel gridSize_lbl;
    private javax.swing.JTextField gridSize_txtBx;
    private javax.swing.JMenuItem imgProcDisplay_MenuItm;
    private javax.swing.JComboBox imgProcOptions_cmbBx;
    private javax.swing.JMenuItem imgProcRemove_MenuItm;
    private javax.swing.JButton imgProcsAdd_btn;
    private javax.swing.JList imgProcs_list;
    private javax.swing.JPopupMenu imgProcs_popUp;
    private javax.swing.JPanel intrinsicCalib_panel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton loadSingleCamCalib_btn;
    private javax.swing.JButton loadStereoCalib_btn;
    private javax.swing.JLabel maxBlobSize_lbl;
    private javax.swing.JTextField maxBlobSize_txtBx;
    private javax.swing.JPanel memObjConstraints_panel;
    private javax.swing.JPanel memObjControl_panel;
    private javax.swing.JLabel minBlobSize_lbl;
    private javax.swing.JTextField minBlobSize_txtBx;
    private javax.swing.JButton modifyColor_cancel_btn;
    private javax.swing.JLabel modifyColor_lbl;
    private javax.swing.JButton modifyColor_ok_btn;
    private javax.swing.JPanel modifyColors_panel;
    private javax.swing.JTextField newSearchPreds_txtBx;
    private javax.swing.JLabel numGridCorners_lbl;
    private javax.swing.JTextField numSnapshots_txtBx;
    private javax.swing.JButton oniWrite_btn;
    private javax.swing.JButton openColorFile_btn;
    private javax.swing.JPanel other_panel;
    private javax.swing.JButton removeColor_btn;
    private javax.swing.JButton rmvConstraints_btn;
    private javax.swing.JButton rmvSearch_btn;
    private javax.swing.JButton rmvSingleSearch_btn;
    private javax.swing.JMenuItem saliencyConstraintDisplay_menuItm;
    private javax.swing.JMenuItem saliencyConstraintRemove_menuItm;
    private javax.swing.JList saliencyConstraints_list;
    private javax.swing.JPopupMenu saliencyConstraints_popUp;
    private javax.swing.JLabel saliencyProcs_lbl;
    private javax.swing.JButton saveColorFile_btn;
    private javax.swing.JButton saveSingleCamCalib_btn;
    private javax.swing.JButton saveStereoCalib_btn;
    private javax.swing.JPanel searchControl_panel;
    private javax.swing.JCheckBox serialProc_chkBx;
    private javax.swing.JCheckBox singleItr_chkBx;
    private javax.swing.JTextArea singleSearchDesc_txtArea;
    private javax.swing.JTabbedPane singleSearchDetails_tab;
    private javax.swing.JPanel singleSearchManagers_panel;
    private javax.swing.JButton snapshotPCD_btn;
    private javax.swing.JButton snapshotRGB_btn;
    private javax.swing.JLabel snapshotStatus_lbl;
    private javax.swing.JButton startColorRange_btn;
    private javax.swing.JButton startSearchType_btn;
    private javax.swing.JButton startSingleSearch_btn;
    private javax.swing.JButton stopSearchType_btn;
    private javax.swing.JButton stopSingleSearch_btn;
    private javax.swing.JButton takeSnapshot_btn;
    private javax.swing.JButton takeSnapshots_btn;
    private javax.swing.JTextField totalSnapshots_txtBx;
    private javax.swing.JCheckBox trackerDepDisplay_chkBx;
    private javax.swing.JList trackerDep_list;
    private javax.swing.JCheckBox trackerDisplay_chkBx;
    private javax.swing.JComboBox trackerOptions_cmbBx;
    private javax.swing.JCheckBox undistort_chkBx;
    private javax.swing.JLabel validationProcs_lbl;
    private javax.swing.JMenuItem validatorConstraintDisplay_menuItm;
    private javax.swing.JMenuItem validatorConstraintRemove_menuItm;
    private javax.swing.JList validatorConstraints_list;
    private javax.swing.JPopupMenu validatorConstraints_popUp;
    private javax.swing.JLabel xGridCorners_lbl;
    private javax.swing.JTextField xGridCorners_txtBx;
    private javax.swing.JLabel yGridCorners_lbl;
    private javax.swing.JTextField yGridCorners_txtBx;
    // End of variables declaration//GEN-END:variables

  //********************************
  //START vision control tab methods
  private synchronized void initVisionSearchTab() {
    //disable start/stop/suspend buttons
    startSearchType_btn.setEnabled(false);
    stopSearchType_btn.setEnabled(false);

    //disable other buttons/checkboxes
    rmvSearch_btn.setEnabled(false);
    addConstraints_btn.setEnabled(false);
    rmvConstraints_btn.setEnabled(false);

    //hook up to Factory list of availableSearchManager
    AbstractListModel listModel = Vision.availableSearchTypes.getAllSearchManagers();
    listModel.addListDataListener(new AvailComposedSearchTypesListener());
    availSearches_list.setModel(listModel);
    availSearches_list.setSelectedIndex(0);

    //load addSearch_cmbBx with options
    addSearch_cmbBx.removeAllItems();
    addSearch_cmbBx.addItem("Empty");
    for (String name : Vision.availableSearchTypes.getTypeNames()) {
      addSearch_cmbBx.addItem(name);
    }
  }

  private synchronized void updateSearchTypePanel(int firstIndex, int lastIndex) {
    if (availSearches_list.getModel().getSize() > 0 && !availSearches_list.isSelectionEmpty()) {
      //System.out.println("first: " + firstIndex);
      //System.out.println("last " + lastIndex);
      //this method also gets called if an item is removed, and then last will be out of bounds
      if (lastIndex > availSearches_list.getModel().getSize() - 1) {
        lastIndex = availSearches_list.getModel().getSize() - 1;
        availSearches_list.setSelectedIndex(lastIndex);
      }

      //get selected SearchManager
      SearchManager selectedSearchType = (SearchManager) availSearches_list.getSelectedValue();

      //set constraints info
      DefaultListModel newModel = new DefaultListModel();
      for (Term t : selectedSearchType.getDescriptors()) {
        newModel.addElement(t);
      }
      existConstraints_list.setModel(newModel);

      //(dis/en)able other buttons/checkboxes
      boolean isRunning = selectedSearchType.isRunning();
      startSearchType_btn.setEnabled(!isRunning);
      stopSearchType_btn.setEnabled(isRunning);
      rmvSearch_btn.setEnabled(true);
      //addConstraints_btn.setEnabled(true);  //enable when incremental add methods are done
      //rmvConstraints_btn.setEnabled(true);  //enable when remove methods are done
    } else {
      //no SearchManager - clear all fields

      //set constraints info
      existConstraints_list.setModel(new DefaultListModel());

      //disable start/stop/suspend buttons
      startSearchType_btn.setEnabled(false);
      stopSearchType_btn.setEnabled(false);

      //disable other buttons/checkboxes
      rmvSearch_btn.setEnabled(false);
      addConstraints_btn.setEnabled(false);
      rmvConstraints_btn.setEnabled(false);
    }

    //this should be updated even if no instantiated SearchManagers exist
    addSearch_cmbBx.removeAllItems();
    addSearch_cmbBx.addItem("Empty");
    for (String name : Vision.availableSearchTypes.getTypeNames()) {
      addSearch_cmbBx.addItem(name);
    }
  }
  //END vision control tab methods
  //********************************

  //********************************
  //START vision control dev tab methods
  private synchronized void initVisionSearchDevTab() {
    //disable start/stop/suspend buttons
    startSingleSearch_btn.setEnabled(false);
    stopSingleSearch_btn.setEnabled(false);

    //disable other buttons/checkboxes
    rmvSingleSearch_btn.setEnabled(false);
    detectorDepDisplay_chkBx.setEnabled(false);
    detectorDisplay_chkBx.setEnabled(false);
    trackerDepDisplay_chkBx.setEnabled(false);
    trackerDisplay_chkBx.setEnabled(false);
    addConstraint_btn.setEnabled(false);
    detectorSelect_btn.setEnabled(false);
    detectorIncProc_chkBx.setEnabled(false);
    constraintsIncProc_chkBx.setEnabled(false);
    serialProc_chkBx.setEnabled(false);
    singleItr_chkBx.setEnabled(false);

    //get all constraint options, avoiding duplicates
    Set<Term> constraintOptions = new HashSet<>();
    constraintOptions.addAll(Vision.availableSaliencyProcessors.getOptions());
    for (Term option : Vision.availableValidationProcessors.getOptions()) {
      constraintOptions.add(option);
    }
    List<Term> sortedConstraintOptions = new ArrayList<>(constraintOptions);
    sortedConstraintOptions.sort(Comparator.comparing(Symbol::getName));
    constraintOptns_comBx.setModel(new DefaultComboBoxModel(sortedConstraintOptions.toArray()));

    //get all image processor type options, avoiding duplicates
    Set<ImageProcessorType> imgProcTypeOptions = new HashSet<ImageProcessorType>();
    imgProcTypeOptions.addAll(Vision.availableSaliencyProcessors.getTypeOptions());
    for (ImageProcessorType option : Vision.availableValidationProcessors.getTypeOptions()) {
      imgProcTypeOptions.add(option);
    }
    for (ImageProcessorType option : Vision.availableValidationProcessors.getTypeOptions()) {
      imgProcTypeOptions.add(option);
    }
    for (ImageProcessorType option : Vision.availableImageProcessors.getTypeOptions()) {
      imgProcTypeOptions.add(option);
    }
    imgProcOptions_cmbBx.setModel(new DefaultComboBoxModel(imgProcTypeOptions.toArray()));
    imgProcs_list.setModel(imgProcs);

    //hook up to Factory list of available memory object types
    AbstractListModel listModel = Vision.availableSearchTypes.getSimpleSearchManagers();
    listModel.addListDataListener(new AvailSingleSearchTypesListener());
    availSingleSearches_list.setModel(listModel);
    availSingleSearches_list.setSelectedIndex(0);

    // (en/dis)able depth display
    if (!(Vision.camera.hasStereo() || Vision.camera.hasDepth())) {
      depthDisplay_chkBx.setEnabled(false);
    }
  }

  private synchronized void updateVisualSearchDevPanel(int firstIndex, int lastIndex) {
    //System.out.println("memobj val availMemObjTypes_listValueChanged selected index: " + availMemObjTypes_list.getSelectedIndex());

    if (availSingleSearches_list.getModel().getSize() > 0 && !availSingleSearches_list.isSelectionEmpty()) {
      //System.out.println("first: " + firstIndex);
      //System.out.println("last " + lastIndex);
      //this method also gets called if an item is removed, and then last will be out of bounds
      if (lastIndex > availSingleSearches_list.getModel().getSize() - 1) {
        lastIndex = availSingleSearches_list.getModel().getSize() - 1;
        availSingleSearches_list.setSelectedIndex(lastIndex);
      }

      //get selected SimpleSearchManager
      if (availSingleSearches_list.getSelectedValue() instanceof SimpleSearchManager) {
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();
        singleSearchDetails_tab.setEnabled(true);

        //set description
        singleSearchDesc_txtArea.setText(selectedSearchType.getDescriptors().toString());

        //set constraints info
        constraintsIncProc_chkBx.setSelected(selectedSearchType.getConstraintsIncrementalProcessing());
        detectorIncProc_chkBx.setSelected(selectedSearchType.getDetectorIncrementalProcessing());
        serialProc_chkBx.setSelected(selectedSearchType.getSerialProcessing());
        singleItr_chkBx.setSelected(selectedSearchType.getSingleIteration());
        saliencyConstraints_list.setModel(selectedSearchType.getSaliencyOperators());
        validatorConstraints_list.setModel(selectedSearchType.getValidatorConstraints());

        //set Detector info
        Detector selectedDetector = selectedSearchType.getSelectedDetector();
        List<ImageProcessorType> dependencies;
        if (selectedDetector == null) {
          detectorOptions_cmbBx.setModel(new DefaultComboBoxModel(Vision.availableDetectors.getOptions().stream().sorted(Comparator.comparing(Symbol::getName)).toArray()));
          detectorDisplay_chkBx.setSelected(false);
          detectorDep_list.setListData(new ArrayList<ImageProcessorType>().toArray());
          detectorSelect_btn.setEnabled(true);
        } else {
          detectorOptions_cmbBx.setModel(new DefaultComboBoxModel(selectedSearchType.getDetectorOptions().toArray()));
          detectorOptions_cmbBx.setSelectedItem(selectedDetector.getType());
          detectorDisplay_chkBx.setSelected(selectedDetector.getDisplayFlag());
          dependencies = selectedDetector.getDependencies();
          detectorDep_list.setListData(dependencies.toArray());
          boolean anyDisplaying = false;
          for (ImageProcessorType dep : dependencies) {
            if (selectedDetector.getDependency(dep).getDisplayFlag()) {
              detectorDep_list.setSelectedValue(dep, false);
              anyDisplaying = true;
            }
          }
          detectorDepDisplay_chkBx.setSelected(anyDisplaying);

          //once detector is selected, disable
          detectorSelect_btn.setEnabled(false);
        }

        //set Tracker info
        Tracker selectedTracker = selectedSearchType.getSelectedTracker();
        if (selectedTracker == null) {
          trackerOptions_cmbBx.setModel(new DefaultComboBoxModel(new ArrayList<TrackerType>().toArray()));
          trackerDisplay_chkBx.setSelected(false);
          trackerDep_list.setListData(new ArrayList<ImageProcessorType>().toArray());
        } else {

          trackerOptions_cmbBx.setModel(new DefaultComboBoxModel(selectedSearchType.getTrackerOptions().toArray()));
          trackerOptions_cmbBx.setSelectedItem(selectedTracker.getType());
          trackerDisplay_chkBx.setSelected(selectedTracker.getDisplayFlag());
          dependencies = selectedTracker.getDependencies();
          trackerDep_list.setListData(dependencies.toArray());
          boolean anyDisplaying = false;
          for (ImageProcessorType dep : dependencies) {
            if (selectedTracker.getDependency(dep).getDisplayFlag()) {
              trackerDep_list.setSelectedValue(dep, false);
              anyDisplaying = true;
            }
          }
          trackerDepDisplay_chkBx.setSelected(anyDisplaying);
        }

        //(dis/en)able other buttons/checkboxes
        boolean isRunning = selectedSearchType.isRunning();
        boolean detectorSelected = (selectedSearchType.getSelectedDetector() != null);
        startSingleSearch_btn.setEnabled(!isRunning);
        stopSingleSearch_btn.setEnabled(isRunning);
        rmvSingleSearch_btn.setEnabled(true);
        addConstraint_btn.setEnabled(true);
        constraintsIncProc_chkBx.setEnabled(true);
        detectorIncProc_chkBx.setEnabled(true);
        serialProc_chkBx.setEnabled(true);
        singleItr_chkBx.setEnabled(true);
        detectorDepDisplay_chkBx.setEnabled(detectorSelected);
        detectorDisplay_chkBx.setEnabled(detectorSelected);
        trackerDepDisplay_chkBx.setEnabled(detectorSelected);
        trackerDisplay_chkBx.setEnabled(detectorSelected);
        trackerOptions_cmbBx.setEnabled(!isRunning);
        detectorOptions_cmbBx.setEnabled(!isRunning);
      } else {
        //not a SimpleSearchManager -> disable all options
        CompositeSearchManager selectedSearchType = (CompositeSearchManager) availSingleSearches_list.getSelectedValue();
        singleSearchDetails_tab.setEnabled(false);
      }
    } else {
      //no memoryObjectTypes - clear all fields

      //set description
      singleSearchDesc_txtArea.setText("");

      //set constraints info
      constraintsIncProc_chkBx.setSelected(false);
      saliencyConstraints_list.setModel(new DefaultListModel());
      validatorConstraints_list.setModel(new DefaultListModel());

      //set Detector info
      detectorOptions_cmbBx.setModel(new DefaultComboBoxModel());
      detectorDisplay_chkBx.setSelected(false);
      detectorDep_list.setListData(new Object[0]);
      detectorDepDisplay_chkBx.setSelected(false);
      detectorIncProc_chkBx.setSelected(false);

      //set Tracker info
      trackerOptions_cmbBx.setModel(new DefaultComboBoxModel());
      trackerDisplay_chkBx.setSelected(false);
      trackerDep_list.setListData(new Object[0]);
      trackerDepDisplay_chkBx.setSelected(false);

      //set other flag info
      serialProc_chkBx.setSelected(false);
      singleItr_chkBx.setSelected(false);

      //  disable start/stop/suspend buttons
      startSingleSearch_btn.setEnabled(false);
      stopSingleSearch_btn.setEnabled(false);

      //disable other buttons/checkboxes
      rmvSingleSearch_btn.setEnabled(false);
      detectorDepDisplay_chkBx.setEnabled(false);
      detectorDisplay_chkBx.setEnabled(false);
      detectorIncProc_chkBx.setEnabled(false);
      detectorSelect_btn.setEnabled(false);
      trackerDepDisplay_chkBx.setEnabled(false);
      trackerDisplay_chkBx.setEnabled(false);
      constraintsIncProc_chkBx.setEnabled(false);
      serialProc_chkBx.setEnabled(false);
      singleItr_chkBx.setEnabled(false);
      addConstraint_btn.setEnabled(false);
    }
  }
  //END vision control dev tab methods
  //********************************

  //********************************
  //START vision processors tab methods
  private synchronized void initVisionProcessorsTab() {

    //hook up to Factory list of availableTrackers
    AbstractListModel trackerListModel = Vision.availableTrackers.getAll();
    availTrackers_list.setModel(trackerListModel);

    //hook up to Factory list of availableDetectors
    AbstractListModel detectorListModel = Vision.availableDetectors.getAll();
    availDetectors_list.setModel(detectorListModel);

    //hook up to Factory list of availableTrackers
    AbstractListModel validatorsListModel = Vision.availableValidationProcessors.getAll();
    availValidators_list.setModel(validatorsListModel);

    //hook up to Factory list of availableTrackers
    AbstractListModel saliencyProcsListModel = Vision.availableSaliencyProcessors.getAll();
    availSaliencyProcs_list.setModel(saliencyProcsListModel);

    //hook up to Factory list of availableTrackers
    AbstractListModel imgProcsListModel = Vision.availableImageProcessors.getAll();
    availImgProcs_list.setModel(imgProcsListModel);
  }

  //END vision processors tab methods
  //********************************
  //********************************
  //START camera parameters tab methods
  private synchronized void initCalibrationTab(boolean undistort) {
    undistort_chkBx.setSelected(undistort);
    toggleCalibrationButtonsEnabled(false);
    if (!hasStereo) {
      calcStereoCalib_btn.setEnabled(false);
      saveStereoCalib_btn.setEnabled(false);
      loadStereoCalib_btn.setEnabled(false);
      cam2_radioBtn.setEnabled(false);
    }

  }

  private void toggleCalibrationButtonsEnabled(boolean snapshotEnabled) {
    xGridCorners_txtBx.setEnabled(!snapshotEnabled);
    yGridCorners_txtBx.setEnabled(!snapshotEnabled);
    gridSize_txtBx.setEnabled(!snapshotEnabled);
    if (hasStereo) {
      calcStereoCalib_btn.setEnabled(!snapshotEnabled);
      saveStereoCalib_btn.setEnabled(!snapshotEnabled);
      loadStereoCalib_btn.setEnabled(!snapshotEnabled);
    }
    calcIntrCalib_btn.setEnabled(!snapshotEnabled);
    calcExtrCalib_btn.setEnabled(!snapshotEnabled);
    saveSingleCamCalib_btn.setEnabled(!snapshotEnabled);
    loadSingleCamCalib_btn.setEnabled(!snapshotEnabled);

    numSnapshots_txtBx.setEnabled(snapshotEnabled);
    takeSnapshot_btn.setEnabled(snapshotEnabled);
    takeSnapshots_btn.setEnabled(snapshotEnabled);
    calibrate_btn.setEnabled(snapshotEnabled);
    cnclCalib_btn.setEnabled(snapshotEnabled);

    //also reset snapshot dispay info
    totalSnapshots_txtBx.setText(Integer.toString(0));
    snapshotStatus_lbl.setText("");
    totalSnapshots_txtBx.setText(Integer.toString(0));
  }
  //END camera parameters tab methods
  //********************************

  //********************************
  //START blob parameters tab methods
  private synchronized void initBlobTabData() {

    //disable color manipulation/selection until there are colors available
    modifyColors_setEnabled(false);

    //set ui color list model to Camera's blobColors
    colorList_list.setModel(blobColors);

    //initialize image frame for color selection from captured image
    colorSelectionFrame = new ImageFrame(this, Vision.camera);
  }

  /**
   * helper function to (dis/en)able modify color buttons
   *
   * @param b
   */
  private void modifyColors_setEnabled(boolean b) {
    modifyColor_ok_btn.setEnabled(b);
    modifyColor_cancel_btn.setEnabled(b);
    startColorRange_btn.setEnabled(b);
    endColorRange_btn.setEnabled(b);
    defineColorRegion_btn.setEnabled(b);
    expandColorRegion_btn.setEnabled(b);
  }

  private boolean loadBlobColors(String filepath) {
    String extension = "txt";

    // if it's just a filepath name WITHOUT the extension, append extension:
    if ((filepath.length() < (1 + extension.length()))
            || (!filepath.substring(filepath.length() - 1 - 3).equals("." + extension))) {
      filepath = filepath + "." + extension;
    }

    //get filename without extension, and use that as color name
    int startIndex = filepath.lastIndexOf("/") + 1;
    int endIndex = filepath.lastIndexOf(".");
    String name = filepath.substring(startIndex, endIndex);
    colorName_txtBx.setText(name);

    //finally, read from file to populate blob color info
    try {
      FileReader file = new FileReader(filepath);
      BufferedReader fileInput = new BufferedReader(file);
      String s;
      ColorHelper.BlobColor newBlobColor;
      Color lowBound;
      Color highBound;
      int minSize;
      int maxSize;
      while ((s = fileInput.readLine()) != null) {
        //parse low and high color bounds
        String[] lowBoundText = s.substring(s.indexOf("(") + 1, s.indexOf("to")).split(",");
        String[] highBoundText = s.substring(s.indexOf("to") + 2, s.indexOf(")")).split(",");
        lowBound = new Color(Misc.getIntOr0(lowBoundText[0].trim()), Misc.getIntOr0(lowBoundText[1].trim()), Misc.getIntOr0(lowBoundText[2].trim()));
        highBound = new Color(Misc.getIntOr0(highBoundText[0].trim()), Misc.getIntOr0(highBoundText[1].trim()), Misc.getIntOr0(highBoundText[2].trim()));

        // check whether there are already sizes set.  if so, use them.  if not,
        //     for backwards compatibility, substitute current ones:
        if (s.indexOf("[") > 0) {
          String sizeStr = s.substring(s.indexOf("["));
          String minStr = sizeStr.substring(1, sizeStr.indexOf("to")).trim();
          String maxStr = sizeStr.substring(sizeStr.indexOf("to") + 2, sizeStr.indexOf("]")).trim();
          minSize = Integer.parseInt(minStr);
          maxSize = Integer.parseInt(maxStr);
        } else {
          Misc.ShowExceptionError(this,
                  new Exception("It appears that the min/max blob sizes have "
                          + "not been specified in the text \"" + s + "\".  "
                          + "\nMin/max values will therefore be substituted with default values, "
                          + "but you should double-check that they are indeed what you would want, "
                          + "\nand update/re-save the file accordingly."),
                  "Min/max blob sizes not specified in file");
          minSize = DEFAULT_MINIMUM_BLOB_SIZE;
          maxSize = Vision.camera.getImageWidth() * Vision.camera.getImageHeight();
        }

        newBlobColor = new ColorHelper.BlobColor(lowBound, highBound, minSize, maxSize);
        blobColors.addElement(newBlobColor);
      }
    } catch (Exception e) {
      log.error("Error loading color file!", e);
      return false;
    }

    return true;
  }

  private boolean saveBlobColors(String filepath) {

    StringBuilder out = new StringBuilder();
    for (int i = 0; i < blobColors.getSize(); ++i) {
      out.append(blobColors.getElementAt(i).toString());
      out.append("\n");
    }

    Writer fileWriter;
    try {
      fileWriter = new BufferedWriter(new FileWriter(filepath));
      fileWriter.append(out.toString());
      fileWriter.close();
    } catch (IOException e) {
      return false;
    }

    return true;
  }

  //END blob parameters tab methods
  //********************************
  //********************************
  //START other tab methods
  //END other tab methods
  //********************************
  //********************************
  //START VisionPipeline tab methods

  /**
   * Updates the list of running search managers
   */
  private void updateRunningList() {
    AbstractListModel listModel = Vision.availableSearchTypes.getAllSearchManagers();
    availManagers.removeAllElements();
    for (int i = 0; i < listModel.getSize(); i++) {
      SearchManager current = (SearchManager) listModel.getElementAt(i);
      if (current.isRunning()) {
        availManagers.addElement(current);
      }
    }
    pipelineWindow.updateList(availManagers);
  }

  /**
   * Allows adding information to existing nodes of vision pipeline
   * @param current
   */
  private void updateVisContent(SearchManager current) {
    updateRunningList();
    if (current != null) {
      pipelineWindow.contentUpdate(current);
    }
    pipelineWindow.updateSearchManagerPanel();
  }

  /**
   * Displays Pipeline Visualization
   * @param evt
   */
  private void DisplayPipelineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayPipelineButtonActionPerformed
    if (DisplayPipelineButton.isSelected()) {
      pipelineWindow.setLocation(this.getWidth(), 0);
      pipelineWindow.setVisible(true);
    } else
      pipelineWindow.setVisible(false);
    }//GEN-LAST:event_DisplayPipelineButtonActionPerformed

  //END VisionPipeline tab methods
  //********************************

    private void oniWrite_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oniWrite_btnActionPerformed
        if (oniWrite_btn.getText().equalsIgnoreCase("start record (rgb-d)")) {
            String ext = "oni";
            JFileChooser fileChooser = getFileChooser(DEFAULT_IMG_PATH, ext);

            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String filepath = fileChooser.getSelectedFile().getAbsolutePath();
                filepath = appendExtensionIfNeeded(filepath, ext);
                Vision.camera.startOniWrite(filepath);

                oniWrite_btn.setText("Stop Record (RGB-D)");
            }
        } else {
            oniWrite_btn.setText("Start Record (RGB-D)");
            Vision.camera.stopOniWrite();
        }
    }//GEN-LAST:event_oniWrite_btnActionPerformed

    private void snapshotPCD_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotPCD_btnActionPerformed
        String ext = "pcd";
        JFileChooser fileChooser = getFileChooser(DEFAULT_IMG_PATH, ext);

        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);

            Vision.camera.writePointCloud(filepath);
        }
    }//GEN-LAST:event_snapshotPCD_btnActionPerformed

    private void snapshotRGB_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapshotRGB_btnActionPerformed
        String ext = "jpg";
        JFileChooser fileChooser = getFileChooser(DEFAULT_IMG_PATH, ext);

        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);

            Vision.camera.writeFrame(filepath);
        }
    }//GEN-LAST:event_snapshotRGB_btnActionPerformed

    private void aviWrite_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aviWrite_btnActionPerformed

        if (aviWrite_btn.getText().equalsIgnoreCase("start record (rgb)")) {
            String ext = "avi";
            JFileChooser fileChooser = getFileChooser(DEFAULT_IMG_PATH, ext);

            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String filepath = fileChooser.getSelectedFile().getAbsolutePath();
                filepath = appendExtensionIfNeeded(filepath, ext);
                Vision.camera.startAviWrite(filepath);

                aviWrite_btn.setText("Stop Record (RGB)");
            }
        } else {
            aviWrite_btn.setText("Start Record (RGB)");
            Vision.camera.stopAviWrite();
        }
    }//GEN-LAST:event_aviWrite_btnActionPerformed

    private void yGridCorners_txtBxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yGridCorners_txtBxKeyTyped
        // only allow 0-9
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
            || (c == KeyEvent.VK_BACK_SPACE)
            || (c == KeyEvent.VK_DELETE))) {
        getToolkit().beep();
        evt.consume();
        }
    }//GEN-LAST:event_yGridCorners_txtBxKeyTyped

    private void xGridCorners_txtBxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_xGridCorners_txtBxKeyTyped
        // only allow 0-9
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
            || (c == KeyEvent.VK_BACK_SPACE)
            || (c == KeyEvent.VK_DELETE))) {
        getToolkit().beep();
        evt.consume();
        }
    }//GEN-LAST:event_xGridCorners_txtBxKeyTyped

    private void calibrate_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrate_btnActionPerformed
        boolean result = false;
        int snapshotCount = Integer.parseInt(totalSnapshots_txtBx.getText());
        if (snapshotCount > 0) {
            result = CameraCalibration.getInstance().runCalibration();
        } else {
            JOptionPane.showMessageDialog(this, "Calibration failed. You must take at least one successful snapshot (10+ recommended).", "Calibration failed!", JOptionPane.ERROR_MESSAGE);
        }

        if (result) {
            toggleCalibrationButtonsEnabled(false);
            JOptionPane.showMessageDialog(this, "Calibration successful.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_calibrate_btnActionPerformed

    private void numSnapshots_txtBxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSnapshots_txtBxKeyTyped
        // only allow 0-9
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
            || (c == KeyEvent.VK_BACK_SPACE)
            || (c == KeyEvent.VK_DELETE))) {
        getToolkit().beep();
        evt.consume();
        }
    }//GEN-LAST:event_numSnapshots_txtBxKeyTyped

    private void takeSnapshots_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeSnapshots_btnActionPerformed
        final int numSnapshotsToTake = Integer.parseInt(numSnapshots_txtBx.getText());
        snapshotStatus_lbl.setText("Taking " + numSnapshots_txtBx.getText() + " snapshots.");
        takeSnapshot_btn.setEnabled(false);
        takeSnapshots_btn.setEnabled(false);
        calibrate_btn.setEnabled(false);
        numSnapshots_txtBx.setEnabled(false);

        Thread takeSnapshotsThread = new Thread(() -> {
            final boolean result = CameraCalibration.getInstance().takeSnapshots(numSnapshotsToTake);

            //run this on UI thread
            try {
                EventQueue.invokeAndWait(() -> {
                    if (result) {
                        int snapshotCount = Integer.parseInt(totalSnapshots_txtBx.getText());
                        snapshotCount += numSnapshotsToTake;
                        totalSnapshots_txtBx.setText(Integer.toString(snapshotCount));
                        snapshotStatus_lbl.setText("Took " + numSnapshotsToTake + " snapshots!");
                        takeSnapshot_btn.setEnabled(true);
                        takeSnapshots_btn.setEnabled(true);
                        calibrate_btn.setEnabled(true);
                        numSnapshots_txtBx.setEnabled(true);
                    }
                });
            } catch (Exception e) {
            }
        });
        takeSnapshotsThread.start();
    }//GEN-LAST:event_takeSnapshots_btnActionPerformed

    private void cnclCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnclCalib_btnActionPerformed
        CameraCalibration.getInstance().cancelCalibration();
        toggleCalibrationButtonsEnabled(false);
    }//GEN-LAST:event_cnclCalib_btnActionPerformed

    private void takeSnapshot_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeSnapshot_btnActionPerformed
        boolean result = CameraCalibration.getInstance().takeSnapshot();
        if (result) {
            int snapshotCount = Integer.parseInt(totalSnapshots_txtBx.getText());
            ++snapshotCount;
            totalSnapshots_txtBx.setText(Integer.toString(snapshotCount));
            snapshotStatus_lbl.setText("Snapshot successful!");
        } else {
            snapshotStatus_lbl.setText("Snapshot failed!");
        }
    }//GEN-LAST:event_takeSnapshot_btnActionPerformed

    private void undistort_chkBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_undistort_chkBxItemStateChanged
        if (undistort_chkBx.isSelected()) {
            Vision.camera.setUndistort(true);

            //disable camera calibration - bc calibration will use undistorted frames instead of raw frames
            calcStereoCalib_btn.setEnabled(false);
            calcIntrCalib_btn.setEnabled(false);
            calcExtrCalib_btn.setEnabled(false);
        } else {
            Vision.camera.setUndistort(false);

            //enable camera calibration
            calcStereoCalib_btn.setEnabled(true);
            calcIntrCalib_btn.setEnabled(true);
            calcExtrCalib_btn.setEnabled(true);
        }
    }//GEN-LAST:event_undistort_chkBxItemStateChanged

    private void saveStereoCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStereoCalib_btnActionPerformed
        String ext = "calib2";
        JFileChooser fileChooser = getFileChooser(DEFAULT_PATH, ext);

        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);
            boolean result = CameraCalibration.getInstance().calibrationStereoSave(filepath);
            if (!result) {
                //save failed
                JOptionPane.showMessageDialog(fileChooser, "Make sure extrinsic camera calibration has been performed.", "Save failed!", JOptionPane.ERROR_MESSAGE);
                saveStereoCalib_btn.doClick();
            }
        }
    }//GEN-LAST:event_saveStereoCalib_btnActionPerformed

    private void loadStereoCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadStereoCalib_btnActionPerformed
        String ext = "calib2";
        JFileChooser fileChooser = getFileChooser(DEFAULT_PATH, ext);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);
            boolean result = CameraCalibration.getInstance().calibrationStereoLoad(filepath);
            if (!result) {
                //save failed
                JOptionPane.showMessageDialog(fileChooser, "Load failed!", "Load failed!", JOptionPane.ERROR_MESSAGE);
                loadStereoCalib_btn.doClick();
            }
        }
    }//GEN-LAST:event_loadStereoCalib_btnActionPerformed

    private void calcStereoCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcStereoCalib_btnActionPerformed
        setEnabled(false);
        boolean result = CameraCalibration.getInstance().calibrateStereoCamerasStart(Integer.parseInt(xGridCorners_txtBx.getText()), Integer.parseInt(yGridCorners_txtBx.getText()), Double.parseDouble(gridSize_txtBx.getText()));
        if (result) {
            toggleCalibrationButtonsEnabled(true);
        } else {
            //calibration failed
            JOptionPane.showMessageDialog(this, "Another calibration routine may be in progress. \nYou must cancel any active calibration before starting a new one.\n\n"
                + "Make sure you're running in stereo mode.\n\nMake sure intrinsic parameters have been calculated for both cameras.", "Stereo calibration failed!", JOptionPane.ERROR_MESSAGE);
        }
        setEnabled(true);
    }//GEN-LAST:event_calcStereoCalib_btnActionPerformed

    private void saveSingleCamCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSingleCamCalib_btnActionPerformed
        String ext = "calib";
        JFileChooser fileChooser = getFileChooser(DEFAULT_PATH, ext);

        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);
            int selectedCam = -1;
            if (cam1_radioBtn.isSelected()) {
                selectedCam = 0;
            } else {
                selectedCam = 1;
            }

            boolean result = CameraCalibration.getInstance().calibrationSingleCamSave(selectedCam, filepath);
            if (!result) {
                //save failed
                JOptionPane.showMessageDialog(fileChooser, "Make sure camera " + selectedCam + " has been calibrated.", "Save failed!", JOptionPane.ERROR_MESSAGE);
                saveSingleCamCalib_btn.doClick();
            }
        }
    }//GEN-LAST:event_saveSingleCamCalib_btnActionPerformed

    private void loadSingleCamCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSingleCamCalib_btnActionPerformed
        String ext = "calib";
        JFileChooser fileChooser = getFileChooser(DEFAULT_PATH, ext);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);
            int selectedCam = -1;
            if (cam1_radioBtn.isSelected()) {
                selectedCam = 0;
            } else {
                selectedCam = 1;
            }

            boolean result = CameraCalibration.getInstance().calibrationSingleCamLoad(selectedCam, filepath);
            if (!result) {
                //load failed
                JOptionPane.showMessageDialog(fileChooser, "Load failed!", "Load failed!", JOptionPane.ERROR_MESSAGE);
                loadSingleCamCalib_btn.doClick();
            }
        }
    }//GEN-LAST:event_loadSingleCamCalib_btnActionPerformed

    private void calcIntrCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcIntrCalib_btnActionPerformed
        //setEnabled(false);
        int selectedCam = -1;
        if (cam1_radioBtn.isSelected()) {
            selectedCam = 0;
        } else {
            selectedCam = 1;
        }
        boolean result = CameraCalibration.getInstance().calibrateIntrSingleCameraStart(selectedCam, Integer.parseInt(xGridCorners_txtBx.getText()), Integer.parseInt(yGridCorners_txtBx.getText()), Double.parseDouble(gridSize_txtBx.getText()));
        if (result) {
            toggleCalibrationButtonsEnabled(true);
        } else {
            //calibration failed
            JOptionPane.showMessageDialog(this, "Another calibration routine may be in progress. \nYou must cancel any active calibration before starting a new one.", "Intrinsic calibration failed!", JOptionPane.ERROR_MESSAGE);
        }
        //setEnabled(true);
    }//GEN-LAST:event_calcIntrCalib_btnActionPerformed

    private void calcExtrCalib_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcExtrCalib_btnActionPerformed
        // this calculates the pose (translation and rotation) of camera relative to calibration grid
        int selectedCam = -1;
        if (cam1_radioBtn.isSelected()) {
            selectedCam = 0;
        } else {
            selectedCam = 1;
        }

        boolean result = CameraCalibration.getInstance().calibrateExtrSingleCameraStart(selectedCam, Integer.parseInt(xGridCorners_txtBx.getText()), Integer.parseInt(yGridCorners_txtBx.getText()), Double.parseDouble(gridSize_txtBx.getText()));
        if (result) {
            toggleCalibrationButtonsEnabled(true);
        } else {
            //calibration failed
            JOptionPane.showMessageDialog(this, "Another calibration routine may be in progress. \nYou must cancel any active calibration before starting a new one.\n\n"
                + "Make sure intrinsic parameters have been calculated.", "Extrinsic calibration failed!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_calcExtrCalib_btnActionPerformed

    private void saveColorFile_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveColorFile_btnActionPerformed
        String ext = "txt";
        String dirPath = DEFAULT_PATH + "/detectors/blob/colors/";
        JFileChooser fileChooser = getFileChooser(dirPath, ext);
        fileChooser.setSelectedFile(new File(dirPath + colorName_txtBx.getText() + "." + ext));

        //TODO: disable filename modification
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);
            boolean result = saveBlobColors(filepath);

            if (result == false) {
                //save failed
                JOptionPane.showMessageDialog(fileChooser, "Save Failed!", "Save Failed!", JOptionPane.ERROR_MESSAGE);
                saveColorFile_btn.doClick();
            }
        }
    }//GEN-LAST:event_saveColorFile_btnActionPerformed

    private void openColorFile_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openColorFile_btnActionPerformed
        String ext = "txt";
        String dirPath = DEFAULT_PATH + "/detectors/blob/colors/";
        JFileChooser fileChooser = getFileChooser(dirPath, ext);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //clear existing colors
            blobColors.removeAllElements();

            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            filepath = appendExtensionIfNeeded(filepath, ext);
            boolean result = loadBlobColors(filepath);

            if (result == true) {
                //set first color as selected
                if (colorList_list.getModel().getSize() > 0) {
                    colorList_list.setSelectedIndex(0);
                }
            } else {
                //open failed
                JOptionPane.showMessageDialog(fileChooser, "Load failed!", "Load failed!", JOptionPane.ERROR_MESSAGE);
                openColorFile_btn.doClick();
            }
        }
    }//GEN-LAST:event_openColorFile_btnActionPerformed

    private void expandColorRegion_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandColorRegion_btnActionPerformed
        colorSelectionFrame.launch(true, 0);
    }//GEN-LAST:event_expandColorRegion_btnActionPerformed

    private void defineColorRegion_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defineColorRegion_btnActionPerformed
        colorSelectionFrame.launch(false, 0);
    }//GEN-LAST:event_defineColorRegion_btnActionPerformed

    private void endColorRange_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endColorRange_btnActionPerformed
        Color newColor = JColorChooser.showDialog(this, "Choose an ending (high bound) color", endColorRange_btn.getBackground());

        if (newColor != null) {
            endColorRange_btn.setBackground(newColor);
        }
    }//GEN-LAST:event_endColorRange_btnActionPerformed

    private void startColorRange_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startColorRange_btnActionPerformed
        Color newColor = JColorChooser.showDialog(this, "Choose a starting (low bound) color", startColorRange_btn.getBackground());

        if (newColor != null) {
            startColorRange_btn.setBackground(newColor);
        }
    }//GEN-LAST:event_startColorRange_btnActionPerformed

    private void modifyColor_ok_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyColor_ok_btnActionPerformed
        //save changes to blob colors, but do not yet push them through to vision pipeline
        int selectedIndex = colorList_list.getSelectionModel().getLeadSelectionIndex();
        ColorHelper.BlobColor selectedColor = (ColorHelper.BlobColor) colorList_list.getModel().getElementAt(selectedIndex);

        selectedColor.setColors(startColorRange_btn.getBackground(), endColorRange_btn.getBackground());
        selectedColor.setBlobSizes(Integer.parseInt(minBlobSize_txtBx.getText()), Integer.parseInt(maxBlobSize_txtBx.getText()));

        colorList_list.repaint();
        //            //hacky way to get the ui to redraw changes made to color
        //            ColorHelper.BlobColors blobColorsListModel = (ColorHelper.BlobColors) colorList_list.rgetModel();
        //            blobColorsListModel.
    }//GEN-LAST:event_modifyColor_ok_btnActionPerformed

    private void modifyColor_cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyColor_cancel_btnActionPerformed
        //disgard changes made to colors, reset ui fields to old values
        int selectedIndex = colorList_list.getSelectionModel().getLeadSelectionIndex();
        ColorHelper.BlobColor selectedColor = (ColorHelper.BlobColor) colorList_list.getModel().getElementAt(selectedIndex);

        //display min and max of selected color
        minBlobSize_txtBx.setText(Integer.toString(selectedColor.getMinSize()));
        maxBlobSize_txtBx.setText(Integer.toString(selectedColor.getMaxSize()));

        //set button colors based on selected color
        startColorRange_btn.setBackground(selectedColor.getLowColorBound());
        endColorRange_btn.setBackground(selectedColor.getHighColorBound());
    }//GEN-LAST:event_modifyColor_cancel_btnActionPerformed

    private void removeColor_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColor_btnActionPerformed
        int selectedIndex = colorList_list.getSelectedIndex();
        if (selectedIndex >= 0) {
            ColorHelper.BlobColor selectedColor = (ColorHelper.BlobColor) colorList_list.getModel().getElementAt(selectedIndex);
            blobColors.removeElement(selectedColor);
            if (colorList_list.getModel().getSize() > 0) {
                colorList_list.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_removeColor_btnActionPerformed

    private void addColor_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColor_btnActionPerformed
        ColorHelper.BlobColor newColor = new ColorHelper.BlobColor(Color.gray, Color.gray,
            DEFAULT_MINIMUM_BLOB_SIZE, Vision.camera.getImageWidth() * Vision.camera.getImageHeight());
        blobColors.addElement(newColor);
        colorList_list.setSelectedIndex(blobColors.getSize() - 1);
    }//GEN-LAST:event_addColor_btnActionPerformed

    private void colorList_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colorList_listValueChanged
        if (evt.getValueIsAdjusting() == false) {

            int selectedIndex = colorList_list.getSelectedIndex();

            if (selectedIndex >= 0) {
                ColorHelper.BlobColor selectedColor = (ColorHelper.BlobColor) colorList_list.getModel().getElementAt(selectedIndex);

                //display min and max of selected color
                minBlobSize_txtBx.setText(Integer.toString(selectedColor.getMinSize()));
                maxBlobSize_txtBx.setText(Integer.toString(selectedColor.getMaxSize()));

                //set button colors based on selected color
                startColorRange_btn.setBackground(selectedColor.getLowColorBound());
                endColorRange_btn.setBackground(selectedColor.getHighColorBound());

                modifyColors_setEnabled(true);
            } else if (colorList_list.getModel().getSize() == 0) {
                //display color name
                colorName_txtBx.setText("Color Name");

                //display min and max of selected color
                minBlobSize_txtBx.setText("");
                maxBlobSize_txtBx.setText("");

                //set button colors based on selected color
                startColorRange_btn.setBackground(Color.GRAY);
                endColorRange_btn.setBackground(Color.GRAY);

                modifyColors_setEnabled(false);
            }
        }
    }//GEN-LAST:event_colorList_listValueChanged

    private void availTrackersDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availTrackersDisplay_chkBxActionPerformed
        VisionProcess visionProcessor = (VisionProcess) availTrackers_list.getSelectedValue();
        visionProcessor.setDisplayFlag(availTrackersDisplay_chkBx.isSelected());
    }//GEN-LAST:event_availTrackersDisplay_chkBxActionPerformed

    private void availTrackers_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availTrackers_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            VisionProcess visionProcessor = (VisionProcess) availTrackers_list.getSelectedValue();
            if (visionProcessor != null) {
                availTrackersDisplay_chkBx.setSelected(visionProcessor.getDisplayFlag());
            }
        }
    }//GEN-LAST:event_availTrackers_listValueChanged

    private void availDetectors_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availDetectors_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            VisionProcess visionProcessor = (VisionProcess) availDetectors_list.getSelectedValue();
            if (visionProcessor != null) {
                availDetectorsDisplay_chkBx.setSelected(visionProcessor.getDisplayFlag());
            }
        }
    }//GEN-LAST:event_availDetectors_listValueChanged

    private void availDetectorsDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availDetectorsDisplay_chkBxActionPerformed
        VisionProcess visionProcessor = (VisionProcess) availDetectors_list.getSelectedValue();
        visionProcessor.setDisplayFlag(availDetectorsDisplay_chkBx.isSelected());
    }//GEN-LAST:event_availDetectorsDisplay_chkBxActionPerformed

    private void availValidatorsDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availValidatorsDisplay_chkBxActionPerformed
        VisionProcess visionProcessor = (VisionProcess) availValidators_list.getSelectedValue();
        visionProcessor.setDisplayFlag(availValidatorsDisplay_chkBx.isSelected());
    }//GEN-LAST:event_availValidatorsDisplay_chkBxActionPerformed

    private void availValidators_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availValidators_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            VisionProcess visionProcessor = (VisionProcess) availValidators_list.getSelectedValue();
            if (visionProcessor != null) {
                availValidatorsDisplay_chkBx.setSelected(visionProcessor.getDisplayFlag());
            }
        }
    }//GEN-LAST:event_availValidators_listValueChanged

    private void availSaliencyProcs_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availSaliencyProcs_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            VisionProcess visionProcessor = (VisionProcess) availSaliencyProcs_list.getSelectedValue();
            if (visionProcessor != null) {
                availSaliencyProcsDisplay_chkBx.setSelected(visionProcessor.getDisplayFlag());
            }
        }
    }//GEN-LAST:event_availSaliencyProcs_listValueChanged

    private void availSaliencyProcsDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availSaliencyProcsDisplay_chkBxActionPerformed
        VisionProcess visionProcessor = (VisionProcess) availSaliencyProcs_list.getSelectedValue();
        visionProcessor.setDisplayFlag(availSaliencyProcsDisplay_chkBx.isSelected());
    }//GEN-LAST:event_availSaliencyProcsDisplay_chkBxActionPerformed

    private void availImgProcsDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availImgProcsDisplay_chkBxActionPerformed
        VisionProcess visionProcessor = (VisionProcess) availImgProcs_list.getSelectedValue();
        visionProcessor.setDisplayFlag(availImgProcsDisplay_chkBx.isSelected());
    }//GEN-LAST:event_availImgProcsDisplay_chkBxActionPerformed

    private void availImgProcs_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availImgProcs_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            VisionProcess visionProcessor = (VisionProcess) availImgProcs_list.getSelectedValue();
            if (visionProcessor != null) {
                availImgProcsDisplay_chkBx.setSelected(visionProcessor.getDisplayFlag());
            }
        }
    }//GEN-LAST:event_availImgProcs_listValueChanged

    private void addSimpleSearchManager_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSimpleSearchManager_btnActionPerformed
        Vision.availableSearchTypes.getTestingInstance(this);
        int size = availSingleSearches_list.getModel().getSize();
        availSingleSearches_list.setSelectedIndex(size - 1);
    }//GEN-LAST:event_addSimpleSearchManager_btnActionPerformed

    private void stopSingleSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSingleSearch_btnActionPerformed
        //  (dis/en)able start/stop/suspend buttons
        startSingleSearch_btn.setEnabled(true);
        stopSingleSearch_btn.setEnabled(false);

        //allow switching detector/tracker while stopped
        trackerOptions_cmbBx.setEnabled(true);
        detectorOptions_cmbBx.setEnabled(true);

        //get selected SearchManager
        SearchManager selectedSearchType = (SearchManager) availSingleSearches_list.getSelectedValue();

        selectedSearchType.stop(this, false);

        //Vision Pipeline
        if (pipelineWindow.isDisplayed(selectedSearchType)) {
          pipelineWindow.remSearchManager(selectedSearchType);
        }
        updateRunningList();

    }//GEN-LAST:event_stopSingleSearch_btnActionPerformed

    private void startSingleSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSingleSearch_btnActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();
        selectedSearchType.start(this);
        updateRunningList();

        //set display on/off
        selectedSearchType.getSelectedDetector().setDisplayFlag(detectorDisplay_chkBx.isSelected());
        selectedSearchType.getSelectedTracker().setDisplayFlag(trackerDisplay_chkBx.isSelected());

        //  (dis/en)able start/stop/suspend buttons
        startSingleSearch_btn.setEnabled(false);
        stopSingleSearch_btn.setEnabled(true);

        //disallow switching detector/tracker while running
        trackerOptions_cmbBx.setEnabled(false);
        detectorOptions_cmbBx.setEnabled(false);
    }//GEN-LAST:event_startSingleSearch_btnActionPerformed

    private void availSingleSearches_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availSingleSearches_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            updateVisualSearchDevPanel(evt.getFirstIndex(), evt.getLastIndex());
        }
    }//GEN-LAST:event_availSingleSearches_listValueChanged

    private void rmvSingleSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvSingleSearch_btnActionPerformed
        SearchManager selectedSearchType = (SearchManager) availSingleSearches_list.getSelectedValue();
        Vision.availableSearchTypes.release(this, selectedSearchType);
    }//GEN-LAST:event_rmvSingleSearch_btnActionPerformed

    private void imgProcsAdd_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgProcsAdd_btnActionPerformed
        // instantiate selected image processor

        //find selected ImageProcessorType - currently must search through three different image processing factories
        ImageProcessorType imgProcType = (ImageProcessorType) imgProcOptions_cmbBx.getSelectedItem();
        ImageProcessor imgProc = null;
        if (Vision.availableSaliencyProcessors.hasCapableProcessorType(imgProcType)) {
            imgProc = Vision.availableSaliencyProcessors.getInstance(this, imgProcType);
        } else if (Vision.availableValidationProcessors.hasCapableProcessorType(imgProcType)) {
            imgProc = Vision.availableValidationProcessors.getInstance(this, imgProcType);
        } else if (Vision.availableImageProcessors.hasCapableProcessorType(imgProcType)) {
            imgProc = Vision.availableImageProcessors.getInstance(this, imgProcType);
        }

        //if this imgProc is already in the GUI list, don't add it again
        //note, this only applies to imgProcs that don't allow multiple instances (eg. SIFT)
        if (imgProcs.contains(imgProc)) {
            return;
        }
        imgProc.start(this);
        imgProcs.addElement(imgProc);

        //select one if one isn't selected
        if (imgProcs_list.getSelectedIndex() == -1) {
            imgProcs_list.setSelectedIndex(0);
        }
    }//GEN-LAST:event_imgProcsAdd_btnActionPerformed

    private void imgProcs_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_imgProcs_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (imgProcs_list.getSelectedIndex() != -1) {
                ImageProcessor imgProc = (ImageProcessor) imgProcs_list.getSelectedValue();
                if (imgProc.getDisplayFlag()) {
                    imgProcDisplay_MenuItm.setText("Display Off");
                } else {
                    imgProcDisplay_MenuItm.setText("Display On");
                }
            }
        }
    }//GEN-LAST:event_imgProcs_listValueChanged

    private void serialProc_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialProc_chkBxActionPerformed
        //get selected MemoryObjectType
        SearchManager selectedSearchType = (SearchManager) availSingleSearches_list.getSelectedValue();

        selectedSearchType.setSerialProcessing(serialProc_chkBx.isSelected());
    }//GEN-LAST:event_serialProc_chkBxActionPerformed

    private void constraintsIncProc_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constraintsIncProc_chkBxActionPerformed
        //turn on/off incremental processing for ALL image processors

        //get selected MemoryObjectType
        SearchManager selectedSearchType = (SearchManager) availSingleSearches_list.getSelectedValue();

        selectedSearchType.setConstraintsIncrementalProcessing(constraintsIncProc_chkBx.isSelected());
    }//GEN-LAST:event_constraintsIncProc_chkBxActionPerformed

    private void detectorIncProc_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorIncProc_chkBxActionPerformed
        //turn on/off incremental processing for the detector

        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        //get selected Detector
        Detector selecteDetector = selectedSearchType.getSelectedDetector();
        if (selecteDetector != null) {
            selecteDetector.setIncrementalProcessing(detectorIncProc_chkBx.isSelected());
        }
    }//GEN-LAST:event_detectorIncProc_chkBxActionPerformed

    private void singleItr_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleItr_chkBxActionPerformed
        //get selected MemoryObjectType
        SearchManager selectedSearchType = (SearchManager) availSingleSearches_list.getSelectedValue();

        selectedSearchType.setSingleIteration(singleItr_chkBx.isSelected());
    }//GEN-LAST:event_singleItr_chkBxActionPerformed

    private void addConstraint_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConstraint_btnActionPerformed
        //get selected MemoryObjectType
        SearchManager selectedSearchType = (SearchManager) availSingleSearches_list.getSelectedValue();

        //get constraint options
        Term descriptor = (Term) constraintOptns_comBx.getSelectedItem();

        selectedSearchType.addConstraint(descriptor,
            constraintsIncProc_chkBx.isSelected(), detectorIncProc_chkBx.isSelected(),
            singleItr_chkBx.isSelected(), serialProc_chkBx.isSelected());
    }//GEN-LAST:event_addConstraint_btnActionPerformed

    private void validatorConstraints_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_validatorConstraints_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (validatorConstraints_list.getSelectedIndex() != -1) {
                ImageProcessor imgProc = (ImageProcessor) validatorConstraints_list.getSelectedValue();
                if (imgProc.getDisplayFlag()) {
                    validatorConstraintDisplay_menuItm.setText("Display Off");
                } else {
                    validatorConstraintDisplay_menuItm.setText("Display On");
                }
            }
        }
    }//GEN-LAST:event_validatorConstraints_listValueChanged

    private void saliencyConstraints_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_saliencyConstraints_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (saliencyConstraints_list.getSelectedIndex() != -1) {
                ImageProcessor imgProc = (ImageProcessor) saliencyConstraints_list.getSelectedValue();
                if (imgProc.getDisplayFlag()) {
                    saliencyConstraintDisplay_menuItm.setText("Display Off");
                } else {
                    saliencyConstraintDisplay_menuItm.setText("Display On");
                }
            }
        }
    }//GEN-LAST:event_saliencyConstraints_listValueChanged

    private void trackerDepDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackerDepDisplay_chkBxActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        //turn selected detector dependencies on/off
        for (Object depType : trackerDep_list.getSelectedValuesList()) {
            selectedSearchType.getSelectedTracker().getDependency((ImageProcessorType) depType).setDisplayFlag(trackerDepDisplay_chkBx.isSelected());
        }
    }//GEN-LAST:event_trackerDepDisplay_chkBxActionPerformed

    private void trackerDep_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_trackerDep_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (trackerDepDisplay_chkBx.isSelected()) {
                //get selected SimpleSearchManager
                SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();
                Tracker selectedTracker = selectedSearchType.getSelectedTracker();

                int first = evt.getFirstIndex();
                int last = evt.getLastIndex();
                System.out.println("trackerDep_listValueChanged first: " + first + " last: " + last);
                for (int i = first; i <= last; ++i) {
                    ImageProcessorType dep = (ImageProcessorType) trackerDep_list.getModel().getElementAt(i);
                    selectedTracker.getDependency(dep).setDisplayFlag(trackerDep_list.isSelectedIndex(i));
                }
            }
        }
    }//GEN-LAST:event_trackerDep_listValueChanged

    private void trackerOptions_cmbBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackerOptions_cmbBxActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        TrackerType tType = (TrackerType) trackerOptions_cmbBx.getSelectedItem();
        if (selectedSearchType.setTracker(tType)) {
            //update detector info in UI (bc it might have changed during tracker selection)
            Detector selectedDetector = selectedSearchType.getSelectedDetector();
            detectorOptions_cmbBx.setSelectedItem(selectedDetector.getType());
            detectorDisplay_chkBx.setSelected(selectedDetector.getDisplayFlag());

            //set detector dependency info in UI
            List<ImageProcessorType> dependencies;
            dependencies = selectedDetector.getDependencies();
            detectorDep_list.setListData(dependencies.toArray());
            boolean anyDisplaying = false;
            for (ImageProcessorType dep : dependencies) {
                if (selectedDetector.getDependency(dep).getDisplayFlag()) {
                    detectorDep_list.setSelectedValue(dep, false);
                    anyDisplaying = true;
                }
            }
            detectorDepDisplay_chkBx.setSelected(anyDisplaying);
        }
    }//GEN-LAST:event_trackerOptions_cmbBxActionPerformed

    private void trackerDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackerDisplay_chkBxActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        selectedSearchType.getSelectedTracker().setDisplayFlag(trackerDisplay_chkBx.isSelected());
    }//GEN-LAST:event_trackerDisplay_chkBxActionPerformed

    private void detectorSelect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorSelect_btnActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        //select Detector
        Term detectorPredicate = (Term) detectorOptions_cmbBx.getSelectedItem();
        selectedSearchType.addConstraint(detectorPredicate,
            constraintsIncProc_chkBx.isSelected(), detectorIncProc_chkBx.isSelected(),
            singleItr_chkBx.isSelected(), serialProc_chkBx.isSelected());

        if (selectedSearchType.getSelectedDetector() == null) {
            JOptionPane.showMessageDialog(this, "No detector selected.", "Warning!", JOptionPane.WARNING_MESSAGE);
            log.error("No detector selected. It's likely there is a Validator with the same Predicate name.\nCheck your Validation and Detector config files.");
            return;
        }

        //reset detector options in UI to reflect instantiated DetectorType options instead of system-wide detector options.
        detectorOptions_cmbBx.setModel(new DefaultComboBoxModel(selectedSearchType.getDetectorOptions().toArray()));
        Detector selectedDetector = selectedSearchType.getSelectedDetector();
        detectorOptions_cmbBx.setSelectedItem(selectedDetector.getType());
        detectorDisplay_chkBx.setSelected(selectedDetector.getDisplayFlag());
        List<ImageProcessorType> dependencies = selectedDetector.getDependencies();
        detectorDep_list.setListData(dependencies.toArray());
        boolean anyDisplaying = false;
        for (ImageProcessorType dep : dependencies) {
            if (selectedDetector.getDependency(dep).getDisplayFlag()) {
                detectorDep_list.setSelectedValue(dep, false);
                anyDisplaying = true;
            }
        }
        detectorDepDisplay_chkBx.setSelected(anyDisplaying);
        detectorSelect_btn.setEnabled(false);

        //set tracker info in UI
        Tracker selectedTracker = selectedSearchType.getSelectedTracker();
        trackerOptions_cmbBx.setModel(new DefaultComboBoxModel(selectedSearchType.getTrackerOptions().toArray()));
        trackerOptions_cmbBx.setSelectedItem(selectedTracker.getType());
        trackerDisplay_chkBx.setSelected(selectedTracker.getDisplayFlag());
        dependencies = selectedTracker.getDependencies();
        trackerDep_list.setListData(dependencies.toArray());
        anyDisplaying = false;
        for (ImageProcessorType dep : dependencies) {
            if (selectedTracker.getDependency(dep).getDisplayFlag()) {
                trackerDep_list.setSelectedValue(dep, false);
                anyDisplaying = true;
            }
        }
        trackerDepDisplay_chkBx.setSelected(anyDisplaying);

        //set description
        singleSearchDesc_txtArea.setText(selectedSearchType.getDescriptors().toString());

        //(dis/en)able buttons
        startSingleSearch_btn.setEnabled(true);
        stopSingleSearch_btn.setEnabled(false);
        detectorDisplay_chkBx.setEnabled(true);
        detectorDepDisplay_chkBx.setEnabled(true);
        trackerDisplay_chkBx.setEnabled(true);
        trackerDepDisplay_chkBx.setEnabled(true);
    }//GEN-LAST:event_detectorSelect_btnActionPerformed

    private void detectorDepDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorDepDisplay_chkBxActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        //turn selected detector dependencies on/off
        for (Object depType : detectorDep_list.getSelectedValuesList()) {
            selectedSearchType.getSelectedDetector().getDependency((ImageProcessorType) depType).setDisplayFlag(detectorDepDisplay_chkBx.isSelected());
        }
    }//GEN-LAST:event_detectorDepDisplay_chkBxActionPerformed

    private void detectorDep_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_detectorDep_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (detectorDepDisplay_chkBx.isSelected() && availSingleSearches_list.getModel().getSize() > 0) {
                //get selected SimpleSearchManager
                SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();
                Detector selectedDetector = selectedSearchType.getSelectedDetector();

                //bounds check
                int first = evt.getFirstIndex();
                if (first >= detectorDep_list.getModel().getSize()) {
                    first = detectorDep_list.getModel().getSize() - 1;
                    if (first < 0) {
                        first = 0;
                    }
                }
                int last = evt.getLastIndex();
                if (last >= detectorDep_list.getModel().getSize()) {
                    last = detectorDep_list.getModel().getSize() - 1;
                }
                //System.out.println("detectorDep_listValueChanged first: " + first + " last: " + last);
                for (int i = first; i <= last; ++i) {
                    ImageProcessorType dep = (ImageProcessorType) detectorDep_list.getModel().getElementAt(i);
                    selectedDetector.getDependency(dep).setDisplayFlag(detectorDep_list.isSelectedIndex(i));
                }
            }
        }
    }//GEN-LAST:event_detectorDep_listValueChanged

    private void detectorOptions_cmbBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorOptions_cmbBxActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        //set Detector info
        Detector selectedDetector = selectedSearchType.getSelectedDetector();
        List<ImageProcessorType> dependencies;
        if (selectedDetector != null) {
            DetectorType dType = (DetectorType) detectorOptions_cmbBx.getSelectedItem();
            if (selectedSearchType.setDetector(dType)) {
                selectedDetector = selectedSearchType.getSelectedDetector();
                detectorDisplay_chkBx.setSelected(selectedDetector.getDisplayFlag());

                //set detector dependency info in UI
                dependencies = selectedDetector.getDependencies();
                detectorDep_list.setListData(dependencies.toArray());
                boolean anyDisplaying = false;
                for (ImageProcessorType dep : dependencies) {
                    if (selectedDetector.getDependency(dep).getDisplayFlag()) {
                        detectorDep_list.setSelectedValue(dep, false);
                        anyDisplaying = true;
                    }
                }
                detectorDepDisplay_chkBx.setSelected(anyDisplaying);

                //set tracker info in UI (bc selecting new detector could change tracker too)
                Tracker selectedTracker = selectedSearchType.getSelectedTracker();
                trackerOptions_cmbBx.setModel(new DefaultComboBoxModel(selectedSearchType.getTrackerOptions().toArray()));
                trackerOptions_cmbBx.setSelectedItem(selectedTracker.getType());
                trackerDisplay_chkBx.setSelected(selectedTracker.getDisplayFlag());
                dependencies = selectedTracker.getDependencies();
                trackerDep_list.setListData(dependencies.toArray());
                anyDisplaying = false;
                for (ImageProcessorType dep : dependencies) {
                    if (selectedTracker.getDependency(dep).getDisplayFlag()) {
                        trackerDep_list.setSelectedValue(dep, false);
                        anyDisplaying = true;
                    }
                }
                trackerDepDisplay_chkBx.setSelected(anyDisplaying);
            }
        }
    }//GEN-LAST:event_detectorOptions_cmbBxActionPerformed

    private void detectorDisplay_chkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorDisplay_chkBxActionPerformed
        //get selected SimpleSearchManager
        SimpleSearchManager selectedSearchType = (SimpleSearchManager) availSingleSearches_list.getSelectedValue();

        selectedSearchType.getSelectedDetector().setDisplayFlag(detectorDisplay_chkBx.isSelected());
    }//GEN-LAST:event_detectorDisplay_chkBxActionPerformed

    private void addSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSearch_btnActionPerformed
        String newSearchSelection = (String) addSearch_cmbBx.getSelectedItem();

        if (newSearchSelection.equalsIgnoreCase("empty")) {
            Vision.availableSearchTypes.getInstance(this);
            int size = availSearches_list.getModel().getSize();
            availSearches_list.setSelectedIndex(size - 1);
        } else {
            List<Term> predicates = new ArrayList();
            predicates.add(Factory.createPredicate(String.format("%s(X)", newSearchSelection)));
            SearchManager newSearchType = Vision.availableSearchTypes.getInstance(this, predicates, true);
            if (newSearchType != null) {
                int size = availSearches_list.getModel().getSize();
                availSearches_list.setSelectedIndex(size - 1);
            }
        }
    }//GEN-LAST:event_addSearch_btnActionPerformed

    private void stopSearchType_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSearchType_btnActionPerformed
        //get selected SearchManager
        SearchManager selectedSearchType = (SearchManager) availSearches_list.getSelectedValue();
        selectedSearchType.stop(this, false);

        //Vision GUI
        if (pipelineWindow.isDisplayed(selectedSearchType)) {
          pipelineWindow.remSearchManager(selectedSearchType);
        }
        updateRunningList();

        //(dis/en)able buttons
        startSearchType_btn.setEnabled(true);
        stopSearchType_btn.setEnabled(false);
    }//GEN-LAST:event_stopSearchType_btnActionPerformed

    private void startSearchType_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSearchType_btnActionPerformed
        //get selected SearchManager
        SearchManager selectedSearchType = (SearchManager) availSearches_list.getSelectedValue();
        selectedSearchType.start(this);
        updateRunningList();

        //(dis/en)able buttons
        startSearchType_btn.setEnabled(false);
        stopSearchType_btn.setEnabled(true);
    }//GEN-LAST:event_startSearchType_btnActionPerformed

    private void rmvSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvSearch_btnActionPerformed
        SearchManager selectedSearchType = (SearchManager) availSearches_list.getSelectedValue();
        Vision.availableSearchTypes.release(this, selectedSearchType);
    }//GEN-LAST:event_rmvSearch_btnActionPerformed

    private void rmvConstraints_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvConstraints_btnActionPerformed
        //get selected SearchManager
        SearchManager selectedSearchType = (SearchManager) availSearches_list.getSelectedValue();

        //get selected Constraints
        for (Object currConstraint : existConstraints_list.getSelectedValuesList()) {
            Term currConstraintPred = (Term) currConstraint;
            selectedSearchType.removeConstraint(currConstraintPred);
        }

        //re-set constraints info
        DefaultListModel newModel = new DefaultListModel();
        for (Term t : selectedSearchType.getDescriptors()) {
            newModel.addElement(t);
        }
        existConstraints_list.setModel(newModel);
    }//GEN-LAST:event_rmvConstraints_btnActionPerformed

    private void addConstraints_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConstraints_btnActionPerformed
        //get selected SearchManager
        SearchManager selectedSearchType = (SearchManager) availSearches_list.getSelectedValue();

        //build predicates from info in text box
        String userInput = addConstraints_txtArea.getText();
        if (userInput.isEmpty()) {
            return;
        }
        Term tempPredicate;
        StringBuilder unusedPredicates = new StringBuilder();
        String[] splitInput = userInput.split(";");
        for (String predicateStr : splitInput) {
            tempPredicate = Factory.createPredicate(predicateStr);

            //warning message if predicate could not be built
            if (tempPredicate == null) {
                JOptionPane.showMessageDialog(null,
                    String.format("The following string could not be converted to a Predicate: %s."
                        + "\nPlease be sure to use a semi-colon separated list.", predicateStr));
                if (unusedPredicates.length() > 0) {
                    unusedPredicates.append("; ");
                }
                unusedPredicates.append(predicateStr);
                continue;
            }

            if (selectedSearchType.addConstraint(tempPredicate)) {
                //add to existing constraint list
                DefaultListModel listModel = (DefaultListModel) existConstraints_list.getModel();
                listModel.addElement(tempPredicate);
            } else {
                if (unusedPredicates.length() > 0) {
                    unusedPredicates.append("; ");
                }
                unusedPredicates.append(predicateStr);
            }
        }

        //warning message if all predicates could not be used
        if (unusedPredicates.length() > 0) {
            JOptionPane.showMessageDialog(null,
                String.format("The following predicate(s) could not be applied to the search: %s.", unusedPredicates.toString()));
            addConstraints_txtArea.setText(unusedPredicates.toString());
        } else {
            addConstraints_txtArea.setText("");
        }
    }//GEN-LAST:event_addConstraints_btnActionPerformed

    private void availSearches_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availSearches_listValueChanged
        if (evt.getValueIsAdjusting() == false) {
            updateSearchTypePanel(evt.getFirstIndex(), evt.getLastIndex());
        }
    }//GEN-LAST:event_availSearches_listValueChanged

    private void FPSCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FPSCheckBoxActionPerformed
      if (FPSCheckBox.isSelected()) {
          Vision.FPSpanel.setVisible(true);
      } else {
          Vision.FPSpanel.setVisible(false);
      }
    }//GEN-LAST:event_FPSCheckBoxActionPerformed

    private void addSearchFromPred_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSearchFromPred_btnActionPerformed

      // get predicates from user input
      String userInput = newSearchPreds_txtBx.getText();
      String[] splitInput = userInput.split(";");
      List<Term> searchDescriptors = new ArrayList<>();
      for (String predicateStr : splitInput) {
          searchDescriptors.add(Factory.createPredicate(predicateStr));
      }

      // convert descriptors to vision component form
      List<Term> visionDescriptors = PredicateHelper.convertToVisionForm(searchDescriptors);

      SearchManager newSearchType = Vision.availableSearchTypes.getInstance(this, visionDescriptors, true);
      if (newSearchType != null) {
        int size = availSearches_list.getModel().getSize();
        availSearches_list.setSelectedIndex(size - 1);
      }
    }//GEN-LAST:event_addSearchFromPred_btnActionPerformed

  //********************************
  //START local DataListeners
  class AvailSingleSearchTypesListener implements ListDataListener {

    @Override
    public void intervalAdded(ListDataEvent lde) {
      //don't need to do anything here
    }

    @Override
    public void intervalRemoved(ListDataEvent lde) {
        // Vision Pipeline
        updateRunningList();
        pipelineWindow.resetVisualization();
    }

    @Override
    public void contentsChanged(ListDataEvent lde) {
        // Vision Pipeline
        updateSearchTypePanel(lde.getIndex0(), lde.getIndex1());
        SearchManager current = (SearchManager) availSingleSearches_list.getModel().getElementAt(lde.getIndex0());
        updateVisContent(current);
    }
  };

  class AvailComposedSearchTypesListener implements ListDataListener {

    @Override
    public void intervalAdded(ListDataEvent lde) {
    }

    @Override
    public void intervalRemoved(ListDataEvent lde) {
        // Vision Pipeline
        updateRunningList();
        pipelineWindow.resetVisualization();
    }

    @Override
    public void contentsChanged(ListDataEvent lde) {
        // Vision Pipeline
        updateSearchTypePanel(lde.getIndex0(), lde.getIndex1());
        SearchManager current = (SearchManager) availSearches_list.getModel().getElementAt(lde.getIndex0());
        updateVisContent(current);
    }
  };

  //END local DataListeners
  //********************************
  //********************************
  //START helper methods
  private synchronized JFileChooser getFileChooser(final String currDir, final String ext) {

    JFileChooser fc = new JFileChooser();
    fc.setAcceptAllFileFilterUsed(false);
    fc.setCurrentDirectory(new File(currDir));
    fc.setFileFilter(
            new FileFilter() {
              //Accept all directories and .extension files
              public boolean accept(File f) {
                if (f.isDirectory()) {
                  return true;
                }

                String extension = GetExtension(f);
                if ((extension != null) && (extension.equals(ext))) {
                  return true;
                } else {
                  return false;
                }
              }

              private String GetExtension(File f) {
                String extension = null;
                String s = f.getName();
                int i = s.lastIndexOf('.');

                if (i > 0 && i < s.length() - 1) {
                  extension = s.substring(i + 1).toLowerCase();
                }
                return extension;
              }

              //The description of this filter
              public String getDescription() {
                return "Allowed file type(s) (." + ext + ")";
              }
            });

    return fc;
  }

  private String appendExtensionIfNeeded(String filepath, String ext) {
    if (!(filepath.substring(filepath.length() - ext.length() - 1).equals("." + ext))) {
      filepath += "." + ext;
    }
    return filepath;
  }

  Color getStartButtonColor() {
    return startColorRange_btn.getBackground();
  }

  Color getEndButtonColor() {
    return endColorRange_btn.getBackground();
  }

  void setStartButtonColor(Color c) {
    startColorRange_btn.setBackground(c);
  }

  void setEndButtonColor(Color c) {
    endColorRange_btn.setBackground(c);
  }
  //END helper methods
  //********************************
  //********************************
  //START debug/test methods
//    public void saveIntrCalib() {
//        String ext = "calib";
//        JFileChooser fileChooser = getFileChooser(DEFAULT_PATH, ext);
//
//        int returnVal = fileChooser.showSaveDialog(this);
//        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
//            appendExtensionIfNeeded(filepath, ext);
//            boolean result = camera.calibrateSingleCamSave(Integer.parseInt(camNum_txtBx.getText()), filepath);
//            if (!result) {
//                //save failed
//                JOptionPane.showMessageDialog(fileChooser, "Make sure camera " + camNum_txtBx.getText() + " has been calibrated.", "Save failed!", JOptionPane.ERROR_MESSAGE);
//                //saveIntrCalib_btn.doClick();
//            }
//        }
//    }
  //END debug/test methods
  //********************************
}
